00000000: 6c0d 0a23 696e 636c 7564 6520 3c73 7464  l..#include <std
00000010: 696f 2e68 3e0d 0a23 696e 636c 7564 6520  io.h>..#include 
00000020: 222e 2e2f 696e 636c 7564 652f 6d6f 6472  "../include/modr
00000030: 6d2e 6822 0d0a 2369 6e63 6c75 6465 2022  m.h"..#include "
00000040: 2e2e 2f69 6e63 6c75 6465 2f63 6861 725f  ../include/char_
00000050: 746f 5f69 6e73 7472 7563 7469 6f6e 732e  to_instructions.
00000060: 6822 0d0a 2369 6e63 6c75 6465 2022 2e2e  h"..#include "..
00000070: 2f69 6e63 6c75 6465 2f67 6574 5f69 6e73  /include/get_ins
00000080: 7472 7563 7469 6f6e 732e 6822 0d0a 2369  tructions.h"..#i
00000090: 6e63 6c75 6465 2022 2e2e 2f69 6e63 6c75  nclude "../inclu
000000a0: 6465 2f67 6574 5f74 6578 745f 746f 6b65  de/get_text_toke
000000b0: 6e73 2e68 220d 0a23 696e 636c 7564 6520  ns.h"..#include 
000000c0: 3c73 7472 696e 672e 683e 0d0a 2369 6e63  <string.h>..#inc
000000d0: 6c75 6465 203c 6173 7365 7274 2e68 3e0d  lude <assert.h>.
000000e0: 0a0d 0a2f 2f20 4e4f 5445 3a20 5468 6520  ...// NOTE: The 
000000f0: 6669 6c65 2073 686f 756c 6420 6265 2070  file should be p
00000100: 7265 7072 6f63 6573 7365 6420 6265 666f  reprocessed befo
00000110: 7265 2074 6f20 7374 616e 6461 7264 697a  re to standardiz
00000120: 6520 7468 6520 696e 7075 7420 7265 6769  e the input regi
00000130: 7374 6572 730d 0a2f 2f20 496e 206f 7264  sters..// In ord
00000140: 6572 2066 6f72 2074 6869 7320 746f 2062  er for this to b
00000150: 6520 7075 6c6c 6564 2074 6f67 6574 6865  e pulled togethe
00000160: 723a 0d0a 0d0a 2f2f 204e 6565 6420 746f  r:....// Need to
00000170: 206c 6f6f 6b20 666f 7220 7468 6520 6265   look for the be
00000180: 6769 6e6e 696e 6720 6368 6172 6163 7465  ginning characte
00000190: 7273 2069 6e20 7468 6520 7374 7269 6e67  rs in the string
000001a0: 2074 6f20 6465 6369 6465 2077 6869 6368   to decide which
000001b0: 206f 6e65 2069 7320 7468 6520 7265 6769   one is the regi
000001c0: 7374 6572 206f 7220 7768 6963 6820 6f6e  ster or which on
000001d0: 6520 6973 2074 6865 206d 656d 6f72 790d  e is the memory.
000001e0: 0a2f 2f20 4966 2069 7420 6861 7320 7061  .// If it has pa
000001f0: 7265 6e74 6865 7369 7320 7468 656e 2069  renthesis then i
00000200: 7420 6e65 6564 7320 6120 6d65 6d6f 7279  t needs a memory
00000210: 206f 7065 7261 6e64 2c20 616e 6420 7468   operand, and th
00000220: 6520 6f74 6865 7220 6f6e 6520 6d75 7374  e other one must
00000230: 2062 6520 6120 7265 6769 7374 6572 0d0a   be a register..
00000240: 2f2f 2074 6865 2072 6567 6973 7465 7220  // the register 
00000250: 6675 6e63 7469 6f6e 7320 7769 6c6c 2062  functions will b
00000260: 6520 7573 6564 206f 6e20 7468 6520 7265  e used on the re
00000270: 6769 7374 6572 2c20 616e 6420 7468 6520  gister, and the 
00000280: 6d6f 6420 6675 6e63 7469 6f6e 2077 696c  mod function wil
00000290: 6c20 6265 2075 7365 6420 6f6e 2074 6865  l be used on the
000002a0: 206d 656d 6f72 7920 0d0a 0d0a 2f2f 2055   memory ....// U
000002b0: 6e66 6f72 7475 6e61 7465 6c79 2074 6869  nfortunately thi
000002c0: 7320 6361 6e6e 6f74 2062 6520 7075 6c6c  s cannot be pull
000002d0: 6564 2074 6f67 6574 6865 7220 7769 7468  ed together with
000002e0: 6f75 7420 6120 5369 6220 6669 6c65 2074  out a Sib file t
000002f0: 6f20 7461 626c 6520 7468 6174 200d 0a2f  o table that ../
00000300: 2f20 5468 6174 2077 696c 6c20 6e65 6564  / That will need
00000310: 2074 6f20 6265 2069 6e63 6c75 6465 6420   to be included 
00000320: 6174 2074 6865 2074 6f70 206f 6620 7468  at the top of th
00000330: 6973 2077 6974 6820 6120 6865 6164 6572  is with a header
00000340: 2066 696c 650d 0a2f 2f20 416c 736f 2c20   file..// Also, 
00000350: 7468 6973 2063 6f72 7265 7370 6f6e 6469  this correspondi
00000360: 6e67 2068 6561 6465 7220 6669 6c65 2020  ng header file  
00000370: 6e65 6564 7320 746f 2062 6520 7570 6461  needs to be upda
00000380: 7465 6420 0d0a 0d0a 696e 7420 6173 6369  ted ....int asci
00000390: 695f 746f 5f69 6e74 5f68 6578 2863 6861  i_to_int_hex(cha
000003a0: 7220 2a20 696e 7075 7429 0d0a 7b0d 0a20  r * input)..{.. 
000003b0: 2069 6e74 2072 6574 7572 6e65 6420 3d20   int returned = 
000003c0: 303b 0d0a 2020 696e 7420 6920 3d20 303b  0;..  int i = 0;
000003d0: 0d0a 2020 7768 696c 6520 2869 6e70 7574  ..  while (input
000003e0: 290d 0a20 2020 207b 0d0a 2020 2020 2020  )..    {..      
000003f0: 7265 7475 726e 6564 207c 3d20 2869 6e70  returned |= (inp
00000400: 7574 5b69 5d20 2d20 3438 293b 0d0a 2020  ut[i] - 48);..  
00000410: 2020 2020 7265 7475 726e 6564 203c 3c3d      returned <<=
00000420: 2034 3b0d 0a20 2020 207d 0d0a 0d0a 2020   4;..    }....  
00000430: 7265 7475 726e 2072 6574 7572 6e65 643b  return returned;
00000440: 0d0a 7d0d 0a0d 0a0d 0a73 7472 7563 7420  ..}......struct 
00000450: 5f5f 696e 7374 7275 6374 696f 6e20 656e  __instruction en
00000460: 636f 6465 5f72 6567 6973 7465 7273 5f72  code_registers_r
00000470: 6d28 2063 6861 7220 2a20 6f70 312c 2020  m( char * op1,  
00000480: 6368 6172 202a 206f 7032 2c20 626f 6f6c  char * op2, bool
00000490: 206f 7031 5f72 6d29 0d0a 7b0d 0a20 2020   op1_rm)..{..   
000004a0: 2020 202f 2f20 5468 6520 7365 636f 6e64     // The second
000004b0: 206f 7065 7261 6e64 2069 7320 656e 636f   operand is enco
000004c0: 6465 6420 7769 7468 2074 6865 2072 6567  ded with the reg
000004d0: 6973 7465 7273 0d0a 2020 2020 2020 2f2f  isters..      //
000004e0: 2054 6865 2066 6972 7374 206f 7065 7261   The first opera
000004f0: 6e64 2069 7320 656e 636f 6465 6420 7769  nd is encoded wi
00000500: 7468 2074 6865 2072 6d0d 0a20 2066 7072  th the rm..  fpr
00000510: 696e 7466 2873 7464 6572 722c 2022 4675  intf(stderr, "Fu
00000520: 6e63 7469 6f6e 2069 7320 6e6f 7420 636f  nction is not co
00000530: 6d70 6c65 7465 2079 6574 2229 3b0d 0a0d  mplete yet");...
00000540: 0a7d 3b0d 0a0d 0a0d 0a0d 0a69 6e6c 696e  .};........inlin
00000550: 6520 626f 6f6c 2072 6567 5f73 7472 696e  e bool reg_strin
00000560: 675f 636f 6d70 6172 6520 2863 6861 7220  g_compare (char 
00000570: 202a 2069 6e2c 2063 6861 7220 202a 2069   * in, char  * i
00000580: 6e32 2920 2f2f 2062 6566 6f72 652c 206a  n2) // before, j
00000590: 7573 7420 6361 7374 2074 6865 2061 6464  ust cast the add
000005a0: 7265 7373 2074 6f20 6f6e 6520 6f66 2074  ress to one of t
000005b0: 7970 6520 696e 742c 2063 6f6d 7069 6c65  ype int, compile
000005c0: 7220 7769 6c6c 206b 6e6f 7720 7768 6174  r will know what
000005d0: 2074 6f20 646f 200d 0a7b 0d0a 2020 2020   to do ..{..    
000005e0: 696e 742a 206c 6873 203d 2028 696e 742a  int* lhs = (int*
000005f0: 2969 6e3b 0d0a 2020 2020 696e 742a 2072  )in;..    int* r
00000600: 6873 203d 2028 696e 742a 2969 6e32 3b0d  hs = (int*)in2;.
00000610: 0a20 2020 202f 2f20 4d61 736b 2074 6865  .    // Mask the
00000620: 206c 6173 7420 6269 7420 6966 2069 7420   last bit if it 
00000630: 6973 2061 2029 2c20 7468 6973 2077 6f75  is a ), this wou
00000640: 6c64 206d 6561 6e20 6974 2077 6f75 6c64  ld mean it would
00000650: 2068 6176 6520 6c65 6e67 7468 2033 0d0a   have length 3..
00000660: 2020 2020 2f2f 2042 7920 6d61 736b 696e      // By maskin
00000670: 6720 7468 6520 6c61 7374 2062 6974 2c20  g the last bit, 
00000680: 4920 6b6e 6f77 2074 6861 7420 6120 636f  I know that a co
00000690: 6d70 6172 6973 6f6e 2061 6761 696e 7374  mparison against
000006a0: 2061 206e 756c 6c20 6368 6172 6163 7465   a null characte
000006b0: 7220 7769 6c6c 2077 6f72 6b0d 0a20 2020  r will work..   
000006c0: 202f 2f20 486f 7765 7665 722c 206f 7468   // However, oth
000006d0: 6572 206f 6e65 7320 6d69 6768 7420 6e65  er ones might ne
000006e0: 6564 2074 6869 730d 0a20 2020 2069 6620  ed this..    if 
000006f0: 2828 282a 696e 2920 2620 3078 3030 3030  (((*in) & 0x0000
00000700: 3030 4646 2920 3d3d 2027 2927 290d 0a20  00FF) == ')').. 
00000710: 2020 207b 0d0a 2020 2020 2020 2020 2a6c     {..        *l
00000720: 6873 2026 3d20 3078 4646 4646 4646 3030  hs &= 0xFFFFFF00
00000730: 3b20 2f2f 204e 6f74 2061 2062 6967 2064  ; // Not a big d
00000740: 6561 6c20 6966 2074 6865 206d 656d 6f72  eal if the memor
00000750: 7920 6973 2061 6c74 6572 6564 200d 0a20  y is altered .. 
00000760: 2020 2020 2020 2072 6574 7572 6e20 2a6c         return *l
00000770: 6873 203d 202a 7268 733b 0d0a 2020 2020  hs = *rhs;..    
00000780: 7d0d 0a20 2020 2065 6c73 650d 0a20 2020  }..    else..   
00000790: 2020 2020 2072 6574 7572 6e20 2a6c 6873       return *lhs
000007a0: 203d 202a 7268 733b 0d0a 7d0d 0a0d 0a69   = *rhs;..}....i
000007b0: 6e74 206d 6f64 3030 5f74 6162 6c65 2863  nt mod00_table(c
000007c0: 6861 722a 2069 6e29 0d0a 7b0d 0a20 2020  har* in)..{..   
000007d0: 202f 2f20 5468 6973 2069 7320 7772 6974   // This is writ
000007e0: 7465 6e20 666f 7220 636c 6561 6e6c 696e  ten for cleanlin
000007f0: 6573 7320 616e 6420 636f 6e73 6973 7465  ess and consiste
00000800: 6e63 790d 0a23 6966 2064 6562 7567 0d0a  ncy..#if debug..
00000810: 2020 2020 2f2f 204e 6565 6420 746f 206d      // Need to m
00000820: 616b 6520 7375 7265 2061 2070 6572 6365  ake sure a perce
00000830: 6e74 2069 7320 6265 696e 6720 7061 7373  nt is being pass
00000840: 6564 2069 6e20 6279 2074 6865 206f 7468  ed in by the oth
00000850: 6572 2066 756e 6374 696f 6e73 0d0a 2020  er functions..  
00000860: 2020 6173 7365 7274 2869 6e5b 305d 203d    assert(in[0] =
00000870: 3d20 2725 2729 3b0d 0a23 656e 6469 660d  = '%');..#endif.
00000880: 0a0d 0a20 2020 2069 6620 2869 6e5b 315d  ...    if (in[1]
00000890: 203d 3d20 2772 2720 2626 2021 2869 6e5b   == 'r' && !(in[
000008a0: 315d 203e 2034 3720 2626 2069 6e5b 315d  1] > 47 && in[1]
000008b0: 203c 2035 3829 290d 0a20 2020 207b 0d0a   < 58))..    {..
000008c0: 2020 2020 2020 2020 6966 2028 7265 675f          if (reg_
000008d0: 7374 7269 6e67 5f63 6f6d 7061 7265 2869  string_compare(i
000008e0: 6e2c 2022 2572 6178 2229 290d 0a20 2020  n, "%rax"))..   
000008f0: 2020 2020 207b 0d0a 2020 2020 2020 2020       {..        
00000900: 2020 2020 7265 7475 726e 2030 3b0d 0a20      return 0;.. 
00000910: 2020 2020 2020 207d 0d0a 0d0a 2020 2020         }....    
00000920: 2020 2020 656c 7365 2069 6620 2872 6567      else if (reg
00000930: 5f73 7472 696e 675f 636f 6d70 6172 6528  _string_compare(
00000940: 696e 2c20 2225 7263 7822 2929 0d0a 2020  in, "%rcx"))..  
00000950: 2020 2020 2020 7b0d 0a20 2020 2020 2020        {..       
00000960: 2020 2020 2072 6574 7572 6e20 313b 0d0a       return 1;..
00000970: 2020 2020 2020 2020 7d0d 0a0d 0a20 2020          }....   
00000980: 2020 2020 2065 6c73 6520 6966 2028 7265       else if (re
00000990: 675f 7374 7269 6e67 5f63 6f6d 7061 7265  g_string_compare
000009a0: 2869 6e2c 2022 2572 6478 2229 290d 0a20  (in, "%rdx")).. 
000009b0: 2020 2020 2020 207b 0d0a 2020 2020 2020         {..      
000009c0: 2020 2020 2020 7265 7475 726e 2032 3b0d        return 2;.
000009d0: 0a20 2020 2020 2020 207d 0d0a 0d0a 2020  .        }....  
000009e0: 2020 2020 2020 656c 7365 2069 6620 2872        else if (r
000009f0: 6567 5f73 7472 696e 675f 636f 6d70 6172  eg_string_compar
00000a00: 6528 696e 2c20 2225 7262 7822 2929 0d0a  e(in, "%rbx"))..
00000a10: 2020 2020 2020 2020 7b0d 0a20 2020 2020          {..     
00000a20: 2020 2020 2020 2072 6574 7572 6e20 333b         return 3;
00000a30: 0d0a 2020 2020 2020 2020 7d0d 0a0d 0a20  ..        }.... 
00000a40: 2020 2020 2020 2065 6c73 6520 6966 2028         else if (
00000a50: 7265 675f 7374 7269 6e67 5f63 6f6d 7061  reg_string_compa
00000a60: 7265 2869 6e2c 2022 2572 6270 2229 290d  re(in, "%rbp")).
00000a70: 0a20 2020 2020 2020 207b 0d0a 2020 2020  .        {..    
00000a80: 2020 2020 2020 2020 7265 7475 726e 2035          return 5
00000a90: 3b0d 0a20 2020 2020 2020 207d 0d0a 0d0a  ;..        }....
00000aa0: 2020 2020 2020 2020 656c 7365 2069 6620          else if 
00000ab0: 2872 6567 5f73 7472 696e 675f 636f 6d70  (reg_string_comp
00000ac0: 6172 6528 696e 2c20 2225 7273 6922 2929  are(in, "%rsi"))
00000ad0: 0d0a 2020 2020 2020 2020 7b0d 0a20 2020  ..        {..   
00000ae0: 2020 2020 2020 2020 2072 6574 7572 6e20           return 
00000af0: 363b 0d0a 2020 2020 2020 2020 7d0d 0a0d  6;..        }...
00000b00: 0a20 2020 2020 2020 2065 6c73 6520 6966  .        else if
00000b10: 2028 7265 675f 7374 7269 6e67 5f63 6f6d   (reg_string_com
00000b20: 7061 7265 2869 6e2c 2022 2572 6469 2229  pare(in, "%rdi")
00000b30: 290d 0a20 2020 2020 2020 207b 0d0a 2020  )..        {..  
00000b40: 2020 2020 2020 2020 2020 7265 7475 726e            return
00000b50: 2037 3b0d 0a20 2020 2020 2020 207d 0d0a   7;..        }..
00000b60: 0d0a 2020 2020 2020 2020 656c 7365 0d0a  ..        else..
00000b70: 2020 2020 2020 2020 7b0d 0a20 2020 2020          {..     
00000b80: 2020 2020 2020 2066 7072 696e 7466 2873         fprintf(s
00000b90: 7464 6572 722c 2022 696d 7072 6f70 6572  tderr, "improper
00000ba0: 2075 7361 6765 2066 6f72 2074 6865 206d   usage for the m
00000bb0: 6f64 726d 2022 293b 0d0a 2020 2020 2020  odrm ");..      
00000bc0: 2020 2020 2020 7265 7475 726e 202d 313b        return -1;
00000bd0: 0d0a 2020 2020 2020 2020 7d0d 0a0d 0a20  ..        }.... 
00000be0: 2020 2020 2020 200d 0a0d 0a20 2020 207d         ....    }
00000bf0: 0d0a 0d0a 2020 2020 656c 7365 2069 6620  ....    else if 
00000c00: 2869 6e5b 315d 203d 3d20 2765 2729 0d0a  (in[1] == 'e')..
00000c10: 2020 2020 7b0d 0a20 2020 2020 2020 2069      {..        i
00000c20: 6620 2872 6567 5f73 7472 696e 675f 636f  f (reg_string_co
00000c30: 6d70 6172 6528 696e 2c20 2225 6561 7822  mpare(in, "%eax"
00000c40: 2929 0d0a 2020 2020 2020 2020 7b0d 0a20  ))..        {.. 
00000c50: 2020 2020 2020 2020 2020 2072 6574 7572             retur
00000c60: 6e20 303b 0d0a 2020 2020 2020 2020 7d0d  n 0;..        }.
00000c70: 0a0d 0a20 2020 2020 2020 2065 6c73 6520  ...        else 
00000c80: 6966 2028 7265 675f 7374 7269 6e67 5f63  if (reg_string_c
00000c90: 6f6d 7061 7265 2869 6e2c 2022 2565 6378  ompare(in, "%ecx
00000ca0: 2229 290d 0a20 2020 2020 2020 207b 0d0a  "))..        {..
00000cb0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
00000cc0: 726e 2031 3b0d 0a20 2020 2020 2020 207d  rn 1;..        }
00000cd0: 0d0a 0d0a 2020 2020 2020 2020 656c 7365  ....        else
00000ce0: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
00000cf0: 636f 6d70 6172 6528 696e 2c20 2225 6564  compare(in, "%ed
00000d00: 7822 2929 0d0a 2020 2020 2020 2020 7b0d  x"))..        {.
00000d10: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
00000d20: 7572 6e20 323b 0d0a 2020 2020 2020 2020  urn 2;..        
00000d30: 7d0d 0a0d 0a20 2020 2020 2020 2065 6c73  }....        els
00000d40: 6520 6966 2028 7265 675f 7374 7269 6e67  e if (reg_string
00000d50: 5f63 6f6d 7061 7265 2869 6e2c 2022 2565  _compare(in, "%e
00000d60: 6278 2229 290d 0a20 2020 2020 2020 207b  bx"))..        {
00000d70: 0d0a 2020 2020 2020 2020 2020 2020 7265  ..            re
00000d80: 7475 726e 2033 3b0d 0a20 2020 2020 2020  turn 3;..       
00000d90: 207d 0d0a 0d0a 2020 2020 2020 2020 656c   }....        el
00000da0: 7365 2069 6620 2872 6567 5f73 7472 696e  se if (reg_strin
00000db0: 675f 636f 6d70 6172 6528 696e 2c20 2225  g_compare(in, "%
00000dc0: 6562 7022 2929 0d0a 2020 2020 2020 2020  ebp"))..        
00000dd0: 7b0d 0a20 2020 2020 2020 2020 2020 2072  {..            r
00000de0: 6574 7572 6e20 353b 0d0a 2020 2020 2020  eturn 5;..      
00000df0: 2020 7d0d 0a0d 0a20 2020 2020 2020 2065    }....        e
00000e00: 6c73 6520 6966 2028 7265 675f 7374 7269  lse if (reg_stri
00000e10: 6e67 5f63 6f6d 7061 7265 2869 6e2c 2022  ng_compare(in, "
00000e20: 2565 7369 2229 290d 0a20 2020 2020 2020  %esi"))..       
00000e30: 207b 0d0a 2020 2020 2020 2020 2020 2020   {..            
00000e40: 7265 7475 726e 2036 3b0d 0a20 2020 2020  return 6;..     
00000e50: 2020 207d 0d0a 0d0a 2020 2020 2020 2020     }....        
00000e60: 656c 7365 2069 6620 2872 6567 5f73 7472  else if (reg_str
00000e70: 696e 675f 636f 6d70 6172 6528 696e 2c20  ing_compare(in, 
00000e80: 2225 6564 6922 2929 0d0a 2020 2020 2020  "%edi"))..      
00000e90: 2020 7b0d 0a20 2020 2020 2020 2020 2020    {..           
00000ea0: 2072 6574 7572 6e20 373b 0d0a 2020 2020   return 7;..    
00000eb0: 2020 2020 7d0d 0a0d 0a20 2020 2020 2020      }....       
00000ec0: 2065 6c73 650d 0a20 2020 2020 2020 207b   else..        {
00000ed0: 0d0a 2020 2020 2020 2020 2020 2020 6670  ..            fp
00000ee0: 7269 6e74 6628 7374 6465 7272 2c20 2269  rintf(stderr, "i
00000ef0: 6d70 726f 7065 7220 7573 6167 6520 666f  mproper usage fo
00000f00: 7220 7468 6520 6d6f 6472 6d20 2229 3b0d  r the modrm ");.
00000f10: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
00000f20: 7572 6e20 2d31 3b0d 0a20 2020 2020 2020  urn -1;..       
00000f30: 207d 0d0a 0d0a 2020 2020 7d0d 0a0d 0a20   }....    }.... 
00000f40: 2020 2065 6c73 650d 0a20 2020 207b 0d0a     else..    {..
00000f50: 2020 2020 2020 2020 2f2f 204d 7573 7420          // Must 
00000f60: 6265 206f 6e65 206f 6620 7468 6520 6e65  be one of the ne
00000f70: 7720 7265 6769 7374 6572 730d 0a20 2020  w registers..   
00000f80: 2020 2020 2069 6620 2872 6567 5f73 7472       if (reg_str
00000f90: 696e 675f 636f 6d70 6172 6528 696e 2c20  ing_compare(in, 
00000fa0: 2225 7238 2922 2929 0d0a 2020 2020 2020  "%r8)"))..      
00000fb0: 2020 7b0d 0a20 2020 2020 2020 2020 2020    {..           
00000fc0: 2072 6574 7572 6e20 303b 0d0a 2020 2020   return 0;..    
00000fd0: 2020 2020 7d0d 0a0d 0a20 2020 2020 2020      }....       
00000fe0: 2065 6c73 6520 6966 2028 7265 675f 7374   else if (reg_st
00000ff0: 7269 6e67 5f63 6f6d 7061 7265 2869 6e2c  ring_compare(in,
00001000: 2022 2572 3929 2229 290d 0a20 2020 2020   "%r9)"))..     
00001010: 2020 207b 0d0a 2020 2020 2020 2020 2020     {..          
00001020: 2020 7265 7475 726e 2031 3b0d 0a20 2020    return 1;..   
00001030: 2020 2020 207d 0d0a 0d0a 2020 2020 2020       }....      
00001040: 2020 656c 7365 2069 6620 2872 6567 5f73    else if (reg_s
00001050: 7472 696e 675f 636f 6d70 6172 6528 696e  tring_compare(in
00001060: 2c20 2225 7231 3022 2929 0d0a 2020 2020  , "%r10"))..    
00001070: 2020 2020 7b0d 0a20 2020 2020 2020 2020      {..         
00001080: 2020 2072 6574 7572 6e20 323b 0d0a 2020     return 2;..  
00001090: 2020 2020 2020 7d0d 0a0d 0a20 2020 2020        }....     
000010a0: 2020 2065 6c73 6520 6966 2028 7265 675f     else if (reg_
000010b0: 7374 7269 6e67 5f63 6f6d 7061 7265 2869  string_compare(i
000010c0: 6e2c 2022 2572 3131 2229 290d 0a20 2020  n, "%r11"))..   
000010d0: 2020 2020 207b 0d0a 2020 2020 2020 2020       {..        
000010e0: 2020 2020 7265 7475 726e 2033 3b0d 0a20      return 3;.. 
000010f0: 2020 2020 2020 207d 0d0a 0d0a 2020 2020         }....    
00001100: 2020 2020 656c 7365 2069 6620 2872 6567      else if (reg
00001110: 5f73 7472 696e 675f 636f 6d70 6172 6528  _string_compare(
00001120: 696e 2c20 2225 7231 3422 2929 0d0a 2020  in, "%r14"))..  
00001130: 2020 2020 2020 7b0d 0a20 2020 2020 2020        {..       
00001140: 2020 2020 2072 6574 7572 6e20 363b 0d0a       return 6;..
00001150: 2020 2020 2020 2020 7d0d 0a0d 0a20 2020          }....   
00001160: 2020 2020 2065 6c73 6520 6966 2028 7265       else if (re
00001170: 675f 7374 7269 6e67 5f63 6f6d 7061 7265  g_string_compare
00001180: 2869 6e2c 2022 2572 3135 2229 290d 0a20  (in, "%r15")).. 
00001190: 2020 2020 2020 207b 0d0a 2020 2020 2020         {..      
000011a0: 2020 2020 2020 7265 7475 726e 2037 3b0d        return 7;.
000011b0: 0a20 2020 2020 2020 207d 0d0a 0d0a 2020  .        }....  
000011c0: 2020 2020 2020 656c 7365 0d0a 2020 2020        else..    
000011d0: 2020 2020 7b0d 0a20 2020 2020 2020 2020      {..         
000011e0: 2020 2066 7072 696e 7466 2873 7464 6572     fprintf(stder
000011f0: 722c 2022 556e 7265 636f 676e 697a 6564  r, "Unrecognized
00001200: 2072 6567 6973 7465 7220 666f 7220 6d6f   register for mo
00001210: 6472 6d22 293b 0d0a 2020 2020 2020 2020  drm");..        
00001220: 2020 2020 7265 7475 726e 202d 313b 202f      return -1; /
00001230: 2f20 5468 6973 206e 6565 6473 2074 6f20  / This needs to 
00001240: 6265 2063 6865 636b 6564 2066 6f72 0d0a  be checked for..
00001250: 2020 2020 2020 2020 7d0d 0a0d 0a20 2020          }....   
00001260: 207d 0d0a 2020 2020 0d0a 7d0d 0a0d 0a0d   }..    ..}.....
00001270: 0a0d 0a0d 0a69 6e74 206d 6f64 3130 5f30  .....int mod10_0
00001280: 315f 7461 626c 6528 6368 6172 2a20 696e  1_table(char* in
00001290: 290d 0a7b 0d0a 2020 2020 2f2f 2054 6869  )..{..    // Thi
000012a0: 7320 6973 2077 7269 7474 656e 2073 6f20  s is written so 
000012b0: 4920 646f 206e 6f74 2068 6176 6520 746f  I do not have to
000012c0: 2077 7269 7465 2069 662f 656c 7365 2062   write if/else b
000012d0: 7261 6e63 6869 6e67 2074 7769 6365 0d0a  ranching twice..
000012e0: 2020 2020 2f2f 2049 7420 6973 2061 6c73      // It is als
000012f0: 6f20 6e6f 7420 7772 6974 7465 6e20 696e  o not written in
00001300: 2072 6567 6172 6473 2074 6f20 7468 6520   regards to the 
00001310: 7369 6220 7374 7566 662e 2054 6861 7420  sib stuff. That 
00001320: 6973 206b 6963 6b65 6420 646f 776e 2074  is kicked down t
00001330: 6865 2072 6f61 640d 0a20 2020 2069 6620  he road..    if 
00001340: 2869 6e5b 315d 203d 3d20 2772 2720 2626  (in[1] == 'r' &&
00001350: 2021 2869 6e5b 315d 203e 2034 3720 2626   !(in[1] > 47 &&
00001360: 2069 6e5b 315d 203c 2035 3820 2929 202f   in[1] < 58 )) /
00001370: 2f20 4e6f 6e65 206f 6620 7468 6520 6e65  / None of the ne
00001380: 7720 7265 6769 7374 6572 732c 2079 6574  w registers, yet
00001390: 0d0a 2020 2020 7b0d 0a20 2020 2020 2020  ..    {..       
000013a0: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
000013b0: 636f 6d70 6172 6528 696e 2c20 2225 7261  compare(in, "%ra
000013c0: 7822 2929 0d0a 2020 2020 2020 2020 7b0d  x"))..        {.
000013d0: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
000013e0: 7572 6e20 303b 0d0a 2020 2020 2020 2020  urn 0;..        
000013f0: 7d0d 0a0d 0a20 2020 2020 2020 2065 6c73  }....        els
00001400: 6520 6966 2028 7265 675f 7374 7269 6e67  e if (reg_string
00001410: 5f63 6f6d 7061 7265 2869 6e2c 2022 2572  _compare(in, "%r
00001420: 6378 2229 290d 0a20 2020 2020 2020 207b  cx"))..        {
00001430: 0d0a 2020 2020 2020 2020 2020 2020 7265  ..            re
00001440: 7475 726e 2031 3b0d 0a20 2020 2020 2020  turn 1;..       
00001450: 207d 0d0a 0d0a 2020 2020 2020 2020 656c   }....        el
00001460: 7365 2069 6620 2872 6567 5f73 7472 696e  se if (reg_strin
00001470: 675f 636f 6d70 6172 6528 696e 2c20 2225  g_compare(in, "%
00001480: 7264 7822 2929 0d0a 2020 2020 2020 2020  rdx"))..        
00001490: 7b0d 0a20 2020 2020 2020 2020 2020 2072  {..            r
000014a0: 6574 7572 6e20 323b 0d0a 2020 2020 2020  eturn 2;..      
000014b0: 2020 7d0d 0a0d 0a20 2020 2020 2020 2065    }....        e
000014c0: 6c73 6520 6966 2028 7265 675f 7374 7269  lse if (reg_stri
000014d0: 6e67 5f63 6f6d 7061 7265 2869 6e2c 2022  ng_compare(in, "
000014e0: 2572 6278 2229 290d 0a20 2020 2020 2020  %rbx"))..       
000014f0: 207b 0d0a 2020 2020 2020 2020 2020 2020   {..            
00001500: 7265 7475 726e 2033 3b0d 0a20 2020 2020  return 3;..     
00001510: 2020 207d 0d0a 0d0a 2020 2020 2020 2020     }....        
00001520: 656c 7365 2069 6620 2872 6567 5f73 7472  else if (reg_str
00001530: 696e 675f 636f 6d70 6172 6528 696e 2c20  ing_compare(in, 
00001540: 2225 7262 7022 2929 0d0a 2020 2020 2020  "%rbp"))..      
00001550: 2020 7b0d 0a20 2020 2020 2020 2020 2020    {..           
00001560: 2072 6574 7572 6e20 353b 0d0a 2020 2020   return 5;..    
00001570: 2020 2020 7d0d 0a0d 0a20 2020 2020 2020      }....       
00001580: 2065 6c73 6520 6966 2028 7265 675f 7374   else if (reg_st
00001590: 7269 6e67 5f63 6f6d 7061 7265 2869 6e2c  ring_compare(in,
000015a0: 2022 2572 7369 2229 290d 0a20 2020 2020   "%rsi"))..     
000015b0: 2020 207b 0d0a 2020 2020 2020 2020 2020     {..          
000015c0: 2020 7265 7475 726e 2036 3b0d 0a20 2020    return 6;..   
000015d0: 2020 2020 207d 0d0a 0d0a 2020 2020 2020       }....      
000015e0: 2020 656c 7365 2069 6620 2872 6567 5f73    else if (reg_s
000015f0: 7472 696e 675f 636f 6d70 6172 6528 696e  tring_compare(in
00001600: 2c20 2225 7264 6922 2929 0d0a 2020 2020  , "%rdi"))..    
00001610: 2020 2020 7b0d 0a20 2020 2020 2020 2020      {..         
00001620: 2020 2072 6574 7572 6e20 373b 0d0a 2020     return 7;..  
00001630: 2020 2020 2020 7d0d 0a0d 0a20 2020 2020        }....     
00001640: 2020 2065 6c73 650d 0a20 2020 2020 2020     else..       
00001650: 207b 0d0a 2020 2020 2020 2020 2020 2020   {..            
00001660: 6670 7269 6e74 6628 7374 6465 7272 2c20  fprintf(stderr, 
00001670: 2255 6e72 6563 6f67 6e69 7a65 6420 7265  "Unrecognized re
00001680: 6769 7374 6572 2066 6f72 206d 6f64 726d  gister for modrm
00001690: 2229 3b0d 0a20 2020 2020 2020 2020 2020  ");..           
000016a0: 2072 6574 7572 6e20 2d31 3b20 2f2f 2054   return -1; // T
000016b0: 6869 7320 6e65 6564 7320 746f 2062 6520  his needs to be 
000016c0: 6368 6563 6b65 6420 666f 720d 0a20 2020  checked for..   
000016d0: 2020 2020 207d 0d0a 2020 2020 7d0d 0a0d       }..    }...
000016e0: 0a20 2020 2065 6c73 6520 6966 2028 696e  .    else if (in
000016f0: 5b31 5d20 3d3d 2027 6527 290d 0a20 2020  [1] == 'e')..   
00001700: 207b 0d0a 2020 2020 2020 2020 6966 2028   {..        if (
00001710: 7265 675f 7374 7269 6e67 5f63 6f6d 7061  reg_string_compa
00001720: 7265 2869 6e2c 2022 2565 6178 2229 290d  re(in, "%eax")).
00001730: 0a20 2020 2020 2020 207b 0d0a 2020 2020  .        {..    
00001740: 2020 2020 2020 2020 7265 7475 726e 2030          return 0
00001750: 3b0d 0a20 2020 2020 2020 207d 0d0a 0d0a  ;..        }....
00001760: 2020 2020 2020 2020 656c 7365 2069 6620          else if 
00001770: 2872 6567 5f73 7472 696e 675f 636f 6d70  (reg_string_comp
00001780: 6172 6528 696e 2c20 2225 6563 7822 2929  are(in, "%ecx"))
00001790: 0d0a 2020 2020 2020 2020 7b0d 0a20 2020  ..        {..   
000017a0: 2020 2020 2020 2020 2072 6574 7572 6e20           return 
000017b0: 313b 0d0a 2020 2020 2020 2020 7d0d 0a0d  1;..        }...
000017c0: 0a20 2020 2020 2020 2065 6c73 6520 6966  .        else if
000017d0: 2028 7265 675f 7374 7269 6e67 5f63 6f6d   (reg_string_com
000017e0: 7061 7265 2869 6e2c 2022 2565 6478 2229  pare(in, "%edx")
000017f0: 290d 0a20 2020 2020 2020 207b 0d0a 2020  )..        {..  
00001800: 2020 2020 2020 2020 2020 7265 7475 726e            return
00001810: 2032 3b0d 0a20 2020 2020 2020 207d 0d0a   2;..        }..
00001820: 0d0a 2020 2020 2020 2020 656c 7365 2069  ..        else i
00001830: 6620 2872 6567 5f73 7472 696e 675f 636f  f (reg_string_co
00001840: 6d70 6172 6528 696e 2c20 2225 6562 7822  mpare(in, "%ebx"
00001850: 2929 0d0a 2020 2020 2020 2020 7b0d 0a20  ))..        {.. 
00001860: 2020 2020 2020 2020 2020 2072 6574 7572             retur
00001870: 6e20 333b 0d0a 2020 2020 2020 2020 7d0d  n 3;..        }.
00001880: 0a0d 0a20 2020 2020 2020 2065 6c73 6520  ...        else 
00001890: 6966 2028 7265 675f 7374 7269 6e67 5f63  if (reg_string_c
000018a0: 6f6d 7061 7265 2869 6e2c 2022 2565 6270  ompare(in, "%ebp
000018b0: 2229 290d 0a20 2020 2020 2020 207b 0d0a  "))..        {..
000018c0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
000018d0: 726e 2035 3b0d 0a20 2020 2020 2020 207d  rn 5;..        }
000018e0: 0d0a 0d0a 2020 2020 2020 2020 656c 7365  ....        else
000018f0: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
00001900: 636f 6d70 6172 6528 696e 2c20 2225 6573  compare(in, "%es
00001910: 6922 2929 0d0a 2020 2020 2020 2020 7b0d  i"))..        {.
00001920: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
00001930: 7572 6e20 363b 0d0a 2020 2020 2020 2020  urn 6;..        
00001940: 7d0d 0a0d 0a20 2020 2020 2020 2065 6c73  }....        els
00001950: 6520 6966 2028 7265 675f 7374 7269 6e67  e if (reg_string
00001960: 5f63 6f6d 7061 7265 2869 6e2c 2022 2565  _compare(in, "%e
00001970: 6469 2229 290d 0a20 2020 2020 2020 207b  di"))..        {
00001980: 0d0a 2020 2020 2020 2020 2020 2020 7265  ..            re
00001990: 7475 726e 2037 3b0d 0a20 2020 2020 2020  turn 7;..       
000019a0: 207d 0d0a 0d0a 2020 2020 2020 2020 656c   }....        el
000019b0: 7365 0d0a 2020 2020 2020 2020 7b0d 0a20  se..        {.. 
000019c0: 2020 2020 2020 2020 2020 2066 7072 696e             fprin
000019d0: 7466 2873 7464 6572 722c 2022 556e 7265  tf(stderr, "Unre
000019e0: 636f 676e 697a 6564 2072 6567 6973 7465  cognized registe
000019f0: 7220 666f 7220 6d6f 6472 6d22 293b 0d0a  r for modrm");..
00001a00: 2020 2020 2020 2020 2020 2020 7265 7475              retu
00001a10: 726e 202d 313b 202f 2f20 5468 6973 206e  rn -1; // This n
00001a20: 6565 6473 2074 6f20 6265 2063 6865 636b  eeds to be check
00001a30: 6564 2066 6f72 0d0a 2020 2020 2020 2020  ed for..        
00001a40: 7d0d 0a20 2020 207d 0d0a 0d0a 2020 2020  }..    }....    
00001a50: 656c 7365 0d0a 2020 2020 7b0d 0a20 2020  else..    {..   
00001a60: 2020 2020 202f 2f4d 7573 7420 6265 206f       //Must be o
00001a70: 6e65 206f 6620 7468 6520 6e65 7720 7265  ne of the new re
00001a80: 6769 7374 6572 730d 0a20 2020 2020 2020  gisters..       
00001a90: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
00001aa0: 636f 6d70 6172 6528 696e 2c20 2225 7238  compare(in, "%r8
00001ab0: 2229 2920 2f2f 2069 6e32 2077 696c 6c20  ")) // in2 will 
00001ac0: 6265 206e 756c 6c20 7465 726d 696e 6174  be null terminat
00001ad0: 6564 600d 0a20 2020 2020 2020 207b 0d0a  ed`..        {..
00001ae0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
00001af0: 726e 2030 3b0d 0a20 2020 2020 2020 207d  rn 0;..        }
00001b00: 0d0a 0d0a 2020 2020 2020 2020 656c 7365  ....        else
00001b10: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
00001b20: 636f 6d70 6172 6528 696e 2c20 2225 7239  compare(in, "%r9
00001b30: 2229 2920 2f2f 2069 6e32 2077 696c 6c20  ")) // in2 will 
00001b40: 6265 206e 756c 6c20 7465 726d 696e 6174  be null terminat
00001b50: 6564 0d0a 2020 2020 2020 2020 7b0d 0a20  ed..        {.. 
00001b60: 2020 2020 2020 2020 2020 2072 6574 7572             retur
00001b70: 6e20 313b 0d0a 2020 2020 2020 2020 7d0d  n 1;..        }.
00001b80: 0a0d 0a20 2020 2020 2020 2065 6c73 6520  ...        else 
00001b90: 6966 2028 7265 675f 7374 7269 6e67 5f63  if (reg_string_c
00001ba0: 6f6d 7061 7265 2869 6e2c 2022 2572 3130  ompare(in, "%r10
00001bb0: 2229 290d 0a20 2020 2020 2020 207b 0d0a  "))..        {..
00001bc0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
00001bd0: 726e 2032 3b0d 0a20 2020 2020 2020 207d  rn 2;..        }
00001be0: 0d0a 0d0a 2020 2020 2020 2020 656c 7365  ....        else
00001bf0: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
00001c00: 636f 6d70 6172 6528 696e 2c20 2225 7231  compare(in, "%r1
00001c10: 3122 2929 0d0a 2020 2020 2020 2020 7b0d  1"))..        {.
00001c20: 0a20 2020 2020 2020 2020 2020 2072 6574  .            ret
00001c30: 7572 6e20 333b 0d0a 2020 2020 2020 2020  urn 3;..        
00001c40: 7d0d 0a0d 0a20 2020 2020 2020 2065 6c73  }....        els
00001c50: 6520 6966 2028 7265 675f 7374 7269 6e67  e if (reg_string
00001c60: 5f63 6f6d 7061 7265 2869 6e2c 2022 2572  _compare(in, "%r
00001c70: 3133 2229 290d 0a20 2020 2020 2020 207b  13"))..        {
00001c80: 0d0a 2020 2020 2020 2020 2020 2020 7265  ..            re
00001c90: 7475 726e 2035 3b0d 0a20 2020 2020 2020  turn 5;..       
00001ca0: 207d 0d0a 0d0a 2020 2020 2020 2020 656c   }....        el
00001cb0: 7365 2069 6620 2872 6567 5f73 7472 696e  se if (reg_strin
00001cc0: 675f 636f 6d70 6172 6528 696e 2c20 2225  g_compare(in, "%
00001cd0: 7231 3422 2929 0d0a 2020 2020 2020 2020  r14"))..        
00001ce0: 7b0d 0a20 2020 2020 2020 2020 2020 2072  {..            r
00001cf0: 6574 7572 6e20 363b 0d0a 2020 2020 2020  eturn 6;..      
00001d00: 2020 7d0d 0a0d 0a20 2020 2020 2020 2065    }....        e
00001d10: 6c73 6520 6966 2028 7265 675f 7374 7269  lse if (reg_stri
00001d20: 6e67 5f63 6f6d 7061 7265 2869 6e2c 2022  ng_compare(in, "
00001d30: 2572 3135 2229 290d 0a20 2020 2020 2020  %r15"))..       
00001d40: 207b 0d0a 2020 2020 2020 2020 2020 2020   {..            
00001d50: 7265 7475 726e 2037 3b0d 0a20 2020 2020  return 7;..     
00001d60: 2020 207d 0d0a 0d0a 2020 2020 2020 2020     }....        
00001d70: 656c 7365 0d0a 2020 2020 2020 2020 7b0d  else..        {.
00001d80: 0a20 2020 2020 2020 2020 2020 2066 7072  .            fpr
00001d90: 696e 7466 2873 7464 6572 722c 2022 556e  intf(stderr, "Un
00001da0: 7265 636f 676e 697a 6564 2072 6567 6973  recognized regis
00001db0: 7465 7220 666f 7220 6d6f 6472 6d22 293b  ter for modrm");
00001dc0: 0d0a 2020 2020 2020 2020 2020 2020 7265  ..            re
00001dd0: 7475 726e 202d 313b 202f 2f20 5468 6973  turn -1; // This
00001de0: 206e 6565 6473 2074 6f20 6265 2063 6865   needs to be che
00001df0: 636b 6564 2066 6f72 0d0a 2020 2020 2020  cked for..      
00001e00: 2020 7d0d 0a20 2020 207d 0d0a 0d0a 0d0a    }..    }......
00001e10: 7d0d 0a0d 0a69 6e74 206d 6f64 3131 5f72  }....int mod11_r
00001e20: 2863 6861 722a 2069 6e29 0d0a 7b0d 0a20  (char* in)..{.. 
00001e30: 2020 202f 2f20 5468 6520 6769 7665 6e20     // The given 
00001e40: 7072 6566 6978 2069 7320 722c 2073 6f20  prefix is r, so 
00001e50: 7765 2068 6176 6520 2552 4547 0d0a 0d0a  we have %REG....
00001e60: 2020 2020 6966 2028 7265 675f 7374 7269      if (reg_stri
00001e70: 6e67 5f63 6f6d 7061 7265 2869 6e2c 2022  ng_compare(in, "
00001e80: 2572 6178 2229 290d 0a20 2020 207b 0d0a  %rax"))..    {..
00001e90: 2020 2020 2020 2020 7265 7475 726e 2030          return 0
00001ea0: 3b0d 0a20 2020 207d 0d0a 0d0a 2020 2020  ;..    }....    
00001eb0: 656c 7365 2069 6620 2872 6567 5f73 7472  else if (reg_str
00001ec0: 696e 675f 636f 6d70 6172 6528 696e 2c20  ing_compare(in, 
00001ed0: 2225 7263 7822 2929 0d0a 2020 2020 7b0d  "%rcx"))..    {.
00001ee0: 0a20 2020 2020 2020 2072 6574 7572 6e20  .        return 
00001ef0: 313b 0d0a 2020 2020 7d0d 0a20 2020 200d  1;..    }..    .
00001f00: 0a20 2020 2065 6c73 6520 6966 2028 7265  .    else if (re
00001f10: 675f 7374 7269 6e67 5f63 6f6d 7061 7265  g_string_compare
00001f20: 2869 6e2c 2022 2572 6478 2229 290d 0a20  (in, "%rdx")).. 
00001f30: 2020 207b 0d0a 2020 2020 2020 2020 7265     {..        re
00001f40: 7475 726e 2032 3b0d 0a20 2020 207d 0d0a  turn 2;..    }..
00001f50: 0d0a 2020 2020 656c 7365 2069 6620 2872  ..    else if (r
00001f60: 6567 5f73 7472 696e 675f 636f 6d70 6172  eg_string_compar
00001f70: 6528 696e 2c20 2225 7262 7822 2929 0d0a  e(in, "%rbx"))..
00001f80: 2020 2020 7b0d 0a20 2020 2020 2020 2072      {..        r
00001f90: 6574 7572 6e20 333b 0d0a 2020 2020 7d0d  eturn 3;..    }.
00001fa0: 0a0d 0a20 2020 2065 6c73 6520 6966 2028  ...    else if (
00001fb0: 7265 675f 7374 7269 6e67 5f63 6f6d 7061  reg_string_compa
00001fc0: 7265 2869 6e2c 2022 2572 7370 2229 290d  re(in, "%rsp")).
00001fd0: 0a20 2020 207b 0d0a 2020 2020 2020 2020  .    {..        
00001fe0: 7265 7475 726e 2034 3b0d 0a20 2020 207d  return 4;..    }
00001ff0: 0d0a 0d0a 2020 2020 656c 7365 2069 6620  ....    else if 
00002000: 2872 6567 5f73 7472 696e 675f 636f 6d70  (reg_string_comp
00002010: 6172 6528 696e 2c20 2225 7262 7022 2929  are(in, "%rbp"))
00002020: 0d0a 2020 2020 7b0d 0a20 2020 2020 2020  ..    {..       
00002030: 2072 6574 7572 6e20 353b 0d0a 2020 2020   return 5;..    
00002040: 7d0d 0a0d 0a20 2020 2065 6c73 6520 6966  }....    else if
00002050: 2028 7265 675f 7374 7269 6e67 5f63 6f6d   (reg_string_com
00002060: 7061 7265 2869 6e2c 2022 2572 7369 2229  pare(in, "%rsi")
00002070: 290d 0a20 2020 207b 0d0a 2020 2020 2020  )..    {..      
00002080: 2020 7265 7475 726e 2036 3b0d 0a20 2020    return 6;..   
00002090: 207d 0d0a 0d0a 2020 2020 656c 7365 2069   }....    else i
000020a0: 6620 2872 6567 5f73 7472 696e 675f 636f  f (reg_string_co
000020b0: 6d70 6172 6528 696e 2c20 2225 7264 6922  mpare(in, "%rdi"
000020c0: 2929 0d0a 2020 2020 7b0d 0a20 2020 2020  ))..    {..     
000020d0: 2020 2072 6574 7572 6e20 373b 0d0a 2020     return 7;..  
000020e0: 2020 7d0d 0a0d 0a20 2020 2065 6c73 650d    }....    else.
000020f0: 0a20 2020 207b 0d0a 2020 2020 2020 2020  .    {..        
00002100: 6670 7269 6e74 6628 7374 6465 7272 2c20  fprintf(stderr, 
00002110: 2249 6d70 726f 7065 7220 7573 6167 6520  "Improper usage 
00002120: 666f 7220 7468 6520 6d6f 6431 315f 7222  for the mod11_r"
00002130: 293b 0d0a 2020 2020 2020 2020 7265 7475  );..        retu
00002140: 726e 202d 313b 0d0a 2020 2020 7d0d 0a0d  rn -1;..    }...
00002150: 0a20 2020 200d 0a0d 0a7d 0d0a 696e 7420  .    ....}..int 
00002160: 6d6f 6431 315f 6528 6368 6172 2a20 696e  mod11_e(char* in
00002170: 290d 0a7b 0d0a 2020 2020 6966 2028 7265  )..{..    if (re
00002180: 675f 7374 7269 6e67 5f63 6f6d 7061 7265  g_string_compare
00002190: 2869 6e2c 2022 2565 6178 2229 290d 0a20  (in, "%eax")).. 
000021a0: 2020 207b 0d0a 2020 2020 2020 2020 7265     {..        re
000021b0: 7475 726e 2030 3b0d 0a20 2020 207d 0d0a  turn 0;..    }..
000021c0: 0d0a 2020 2020 656c 7365 2069 6620 2872  ..    else if (r
000021d0: 6567 5f73 7472 696e 675f 636f 6d70 6172  eg_string_compar
000021e0: 6528 696e 2c20 2225 6563 7822 2929 0d0a  e(in, "%ecx"))..
000021f0: 2020 2020 7b0d 0a20 2020 2020 2020 2072      {..        r
00002200: 6574 7572 6e20 313b 0d0a 2020 2020 7d0d  eturn 1;..    }.
00002210: 0a0d 0a20 2020 2065 6c73 6520 6966 2028  ...    else if (
00002220: 7265 675f 7374 7269 6e67 5f63 6f6d 7061  reg_string_compa
00002230: 7265 2869 6e2c 2022 2565 6478 2229 290d  re(in, "%edx")).
00002240: 0a20 2020 207b 0d0a 2020 2020 2020 2020  .    {..        
00002250: 7265 7475 726e 2032 3b0d 0a20 2020 207d  return 2;..    }
00002260: 0d0a 0d0a 2020 2020 656c 7365 2069 6620  ....    else if 
00002270: 2872 6567 5f73 7472 696e 675f 636f 6d70  (reg_string_comp
00002280: 6172 6528 696e 2c20 2225 6562 7822 2929  are(in, "%ebx"))
00002290: 0d0a 2020 2020 7b0d 0a20 2020 2020 2020  ..    {..       
000022a0: 2072 6574 7572 6e20 333b 0d0a 2020 2020   return 3;..    
000022b0: 7d0d 0a0d 0a20 2020 2065 6c73 6520 6966  }....    else if
000022c0: 2028 7265 675f 7374 7269 6e67 5f63 6f6d   (reg_string_com
000022d0: 7061 7265 2869 6e2c 2022 2565 7370 2229  pare(in, "%esp")
000022e0: 290d 0a20 2020 207b 0d0a 2020 2020 2020  )..    {..      
000022f0: 2020 7265 7475 726e 2034 3b0d 0a20 2020    return 4;..   
00002300: 207d 0d0a 0d0a 2020 2020 656c 7365 2069   }....    else i
00002310: 6620 2872 6567 5f73 7472 696e 675f 636f  f (reg_string_co
00002320: 6d70 6172 6528 696e 2c20 2225 6562 7022  mpare(in, "%ebp"
00002330: 2929 0d0a 2020 2020 7b0d 0a20 2020 2020  ))..    {..     
00002340: 2020 2072 6574 7572 6e20 353b 0d0a 2020     return 5;..  
00002350: 2020 7d0d 0a0d 0a20 2020 2065 6c73 6520    }....    else 
00002360: 6966 2028 7265 675f 7374 7269 6e67 5f63  if (reg_string_c
00002370: 6f6d 7061 7265 2869 6e2c 2022 2565 7369  ompare(in, "%esi
00002380: 2229 290d 0a20 2020 207b 0d0a 2020 2020  "))..    {..    
00002390: 2020 2020 7265 7475 726e 2036 3b0d 0a20      return 6;.. 
000023a0: 2020 207d 0d0a 0d0a 2020 2020 656c 7365     }....    else
000023b0: 2069 6620 2872 6567 5f73 7472 696e 675f   if (reg_string_
000023c0: 636f 6d70 6172 6528 696e 2c20 2225 6564  compare(in, "%ed
000023d0: 6922 2929 0d0a 2020 2020 7b0d 0a20 2020  i"))..    {..   
000023e0: 2020 2020 2072 6574 7572 6e20 373b 0d0a       return 7;..
000023f0: 2020 2020 7d0d 0a0d 0a20 2020 2065 6c73      }....    els
00002400: 650d 0a20 2020 207b 0d0a 2020 2020 2020  e..    {..      
00002410: 2020 6670 7269 6e74 6628 7374 6465 7272    fprintf(stderr
00002420: 2c20 2249 6d70 726f 7065 7220 7573 6167  , "Improper usag
00002430: 6520 666f 7220 7468 6520 6d6f 6431 315f  e for the mod11_
00002440: 6522 293b 0d0a 2020 2020 2020 2020 7265  e");..        re
00002450: 7475 726e 202d 313b 0d0a 2020 2020 7d0d  turn -1;..    }.
00002460: 0a0d 0a0d 0a0d 0a7d 0d0a 696e 7420 6d6f  .......}..int mo
00002470: 6431 315f 7374 2863 6861 722a 2069 6e29  d11_st(char* in)
00002480: 0d0a 7b0d 0a20 2020 202f 2f20 5468 6572  ..{..    // Ther
00002490: 6520 6172 6520 6a75 7374 2038 2072 6567  e are just 8 reg
000024a0: 6973 7465 7273 2066 6f72 2074 6869 7320  isters for this 
000024b0: 7374 3020 2d20 7374 370d 0a20 2020 2072  st0 - st7..    r
000024c0: 6574 7572 6e20 696e 5b33 5d20 2d20 3438  eturn in[3] - 48
000024d0: 3b0d 0a7d 0d0a 0d0a 696e 7420 6d6f 6431  ;..}....int mod1
000024e0: 315f 6d6d 2863 6861 722a 2069 6e29 0d0a  1_mm(char* in)..
000024f0: 7b0d 0a20 2020 2072 6574 7572 6e20 696e  {..    return in
00002500: 5b33 5d20 2d20 3438 3b0d 0a7d 0d0a 0d0a  [3] - 48;..}....
00002510: 696e 7420 6d6f 6431 315f 786d 6d28 6368  int mod11_xmm(ch
00002520: 6172 2a20 696e 290d 0a7b 0d0a 2020 2020  ar* in)..{..    
00002530: 696e 7420 6469 7370 5f6f 6666 7365 7420  int disp_offset 
00002540: 3d20 303b 0d0a 0d0a 2020 2020 7768 696c  = 0;....    whil
00002550: 6520 2869 6e5b 6469 7370 5f6f 6666 7365  e (in[disp_offse
00002560: 745d 2021 3d20 2729 2720 2626 2064 6973  t] != ')' && dis
00002570: 705f 6f66 6673 6574 2b2b 293b 0d0a 2020  p_offset++);..  
00002580: 2020 696e 5b64 6973 705f 6f66 6673 6574    in[disp_offset
00002590: 5d20 3d20 303b 0d0a 0d0a 2020 2020 696e  ] = 0;....    in
000025a0: 7420 6e75 6d5f 6c61 6265 6c20 3d20 6174  t num_label = at
000025b0: 6f69 2869 6e20 2b20 6469 7370 5f6f 6666  oi(in + disp_off
000025c0: 7365 7429 3b0d 0a0d 0a20 2020 2072 6574  set);....    ret
000025d0: 7572 6e20 6e75 6d5f 6c61 6265 6c20 2520  urn num_label % 
000025e0: 383b 0d0a 7d0d 0a0d 0a69 6e74 206d 6f64  8;..}....int mod
000025f0: 3131 5f72 6578 2863 6861 722a 2069 6e29  11_rex(char* in)
00002600: 0d0a 7b0d 0a20 2020 202f 2f20 5468 6973  ..{..    // This
00002610: 206f 6e65 2072 6571 7569 7265 7320 6f6e   one requires on
00002620: 6520 6f66 2074 6865 206e 6577 6572 2072  e of the newer r
00002630: 6567 6973 7465 7273 2028 6578 7465 6e73  egisters (extens
00002640: 696f 6e73 290d 0a20 2020 202f 2f20 7238  ions)..    // r8
00002650: 2c20 7239 2c20 7231 302c 2065 7463 0d0a  , r9, r10, etc..
00002660: 2020 2020 2f2f 204d 6f76 6520 746f 2074      // Move to t
00002670: 6865 2066 726f 6e74 206f 6620 7468 6520  he front of the 
00002680: 776f 7264 2077 6974 6820 7468 6520 290d  word with the ).
00002690: 0a0d 0a20 2020 2069 6e74 2064 6973 7020  ...    int disp 
000026a0: 3d20 303b 0d0a 2020 2020 7768 696c 6520  = 0;..    while 
000026b0: 2869 6e5b 6469 7370 2b2b 5d20 213d 2027  (in[disp++] != '
000026c0: 2927 293b 202f 2f20 7769 6c6c 206f 7665  )'); // will ove
000026d0: 7273 686f 6f74 2062 7920 6f6e 650d 0a20  rshoot by one.. 
000026e0: 2020 2064 6973 702d 2d3b 0d0a 2020 2020     disp--;..    
000026f0: 696e 5b64 6973 705d 203d 2030 3b20 2f2f  in[disp] = 0; //
00002700: 204e 6f77 2065 7665 7279 7468 696e 6720   Now everything 
00002710: 6166 7465 7220 7468 6520 6e75 6d62 6572  after the number
00002720: 2077 696c 6c20 6265 206e 756c 6c20 7465   will be null te
00002730: 726d 696e 6174 6564 0d0a 2020 2020 7265  rminated..    re
00002740: 7475 726e 2061 746f 6928 2b2b 696e 293b  turn atoi(++in);
00002750: 202f 2f20 486f 7065 6675 6c6c 7920 7468   // Hopefully th
00002760: 6973 2077 696c 6c20 6265 2070 6173 7365  is will be passe
00002770: 6420 696e 2077 6974 6820 7468 6520 7065  d in with the pe
00002780: 7263 656e 7420 7369 676e 2063 6f6d 696e  rcent sign comin
00002790: 6720 6669 7273 740d 0a20 2020 200d 0a7d  g first..    ..}
000027a0: 0d0a 0d0a 696e 7420 6d6f 6431 315f 6f74  ....int mod11_ot
000027b0: 6865 7273 2863 6861 722a 2069 6e29 0d0a  hers(char* in)..
000027c0: 7b0d 0a20 2020 202f 2f20 5468 6973 2066  {..    // This f
000027d0: 756e 6374 696f 6e20 7769 6c6c 2062 6520  unction will be 
000027e0: 7573 6564 2066 6f72 2074 6865 2072 6567  used for the reg
000027f0: 6973 7465 7273 2077 6974 686f 7574 2065  isters without e
00002800: 6173 7920 746f 206c 6f6f 6b20 666f 7220  asy to look for 
00002810: 7072 6566 6978 6573 200d 0a20 2020 202f  prefixes ..    /
00002820: 2f20 4d61 7920 6265 2075 7365 6675 6c20  / May be useful 
00002830: 666f 7220 6869 6768 2c20 6c6f 772c 2065  for high, low, e
00002840: 7463 2c0d 0a20 2020 202f 2f20 3520 6361  tc,..    // 5 ca
00002850: 7465 676f 7269 6573 2020 782c 206c 2c20  tegories  x, l, 
00002860: 682c 2070 2c20 690d 0a20 2020 202f 2f20  h, p, i..    // 
00002870: 4578 7065 6374 6564 2075 7361 6765 3a20  Expected usage: 
00002880: 2561 780d 0a20 2020 200d 0a20 2020 2073  %ax..    ..    s
00002890: 7769 7463 6820 2869 6e5b 325d 290d 0a20  witch (in[2]).. 
000028a0: 2020 207b 0d0a 2020 2020 6361 7365 2027     {..    case '
000028b0: 6c27 3a20 2f2f 204c 6f77 2072 6567 6973  l': // Low regis
000028c0: 7465 720d 0a20 2020 2020 2020 2069 6620  ter..        if 
000028d0: 2869 6e5b 315d 203d 3d20 2761 2729 0d0a  (in[1] == 'a')..
000028e0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
000028f0: 726e 2030 3b0d 0a20 2020 2020 2020 2065  rn 0;..        e
00002900: 6c73 6520 6966 2028 696e 5b31 5d20 3d3d  lse if (in[1] ==
00002910: 2027 6327 290d 0a20 2020 2020 2020 2020   'c')..         
00002920: 2020 2072 6574 7572 6e20 313b 0d0a 2020     return 1;..  
00002930: 2020 2020 2020 656c 7365 2069 6620 2869        else if (i
00002940: 6e5b 315d 203d 3d20 2764 2729 0d0a 2020  n[1] == 'd')..  
00002950: 2020 2020 2020 2020 2020 7265 7475 726e            return
00002960: 2032 3b0d 0a20 2020 2020 2020 2065 6c73   2;..        els
00002970: 6520 6966 2028 696e 5b31 5d20 3d3d 2027  e if (in[1] == '
00002980: 6227 290d 0a20 2020 2020 2020 2020 2020  b')..           
00002990: 2072 6574 7572 6e20 333b 0d0a 2020 2020   return 3;..    
000029a0: 2020 2020 656c 7365 0d0a 2020 2020 2020      else..      
000029b0: 2020 7b0d 0a20 2020 2020 2020 2020 2020    {..           
000029c0: 2066 7072 696e 7466 2873 7464 6572 722c   fprintf(stderr,
000029d0: 2022 496d 7072 6f70 6572 2075 7361 6765   "Improper usage
000029e0: 206f 6620 7468 6520 6d6f 6431 315f 6f74   of the mod11_ot
000029f0: 6865 7273 2066 756e 6374 696f 6e2c 206c  hers function, l
00002a00: 6f6f 6b69 6e67 2066 6f72 2061 206c 6f77  ooking for a low
00002a10: 2062 7974 6522 293b 0d0a 2020 2020 2020   byte");..      
00002a20: 2020 7d0d 0a20 2020 2020 2020 2062 7265    }..        bre
00002a30: 616b 3b0d 0a20 2020 2063 6173 6520 2778  ak;..    case 'x
00002a40: 273a 202f 2f20 4765 6e65 7261 6c20 7075  ': // General pu
00002a50: 7270 6f73 6520 7265 6769 7374 6572 2c20  rpose register, 
00002a60: 6c6f 6f6b 696e 6720 746f 2075 7365 2032  looking to use 2
00002a70: 2062 7974 6573 200d 0a20 2020 2020 2020   bytes ..       
00002a80: 2069 6620 2869 6e5b 315d 203d 3d20 2761   if (in[1] == 'a
00002a90: 2729 0d0a 2020 2020 2020 2020 2020 2020  ')..            
00002aa0: 7265 7475 726e 2030 3b0d 0a20 2020 2020  return 0;..     
00002ab0: 2020 2065 6c73 6520 6966 2028 696e 5b31     else if (in[1
00002ac0: 5d20 3d3d 2027 6327 290d 0a20 2020 2020  ] == 'c')..     
00002ad0: 2020 2020 2020 2072 6574 7572 6e20 313b         return 1;
00002ae0: 0d0a 2020 2020 2020 2020 656c 7365 2069  ..        else i
00002af0: 6620 2869 6e5b 315d 203d 3d20 2764 2729  f (in[1] == 'd')
00002b00: 0d0a 2020 2020 2020 2020 2020 2020 7265  ..            re
00002b10: 7475 726e 2032 3b0d 0a20 2020 2020 2020  turn 2;..       
00002b20: 2065 6c73 6520 6966 2028 696e 5b31 5d20   else if (in[1] 
00002b30: 3d3d 2027 6227 290d 0a20 2020 2020 2020  == 'b')..       
00002b40: 2020 2020 2072 6574 7572 6e20 333b 0d0a       return 3;..
00002b50: 2020 2020 2020 2020 656c 7365 0d0a 2020          else..  
00002b60: 2020 2020 2020 7b0d 0a20 2020 2020 2020        {..       
00002b70: 2020 2020 2066 7072 696e 7466 2873 7464       fprintf(std
00002b80: 6572 722c 2022 496d 7072 6f70 6572 2075  err, "Improper u
00002b90: 7361 6765 206f 6620 7468 6520 6d6f 6431  sage of the mod1
00002ba0: 315f 6f74 6865 7273 2066 756e 6374 696f  1_others functio
00002bb0: 6e2c 206c 6f6f 6b69 6e67 2066 6f72 2061  n, looking for a
00002bc0: 2067 656e 6572 616c 2072 6567 6973 7465   general registe
00002bd0: 7222 293b 0d0a 2020 2020 2020 2020 7d0d  r");..        }.
00002be0: 0a20 2020 2020 2020 2062 7265 616b 3b0d  .        break;.
00002bf0: 0a20 2020 2063 6173 6520 2768 273a 202f  .    case 'h': /
00002c00: 2f20 4c6f 6f6b 696e 6720 666f 7220 7468  / Looking for th
00002c10: 6520 6869 6768 2062 7974 650d 0a20 2020  e high byte..   
00002c20: 2020 2020 2069 6620 2869 6e5b 315d 203d       if (in[1] =
00002c30: 3d20 2761 2729 0d0a 2020 2020 2020 2020  = 'a')..        
00002c40: 2020 2020 7265 7475 726e 2034 3b0d 0a20      return 4;.. 
00002c50: 2020 2020 2020 2065 6c73 6520 6966 2028         else if (
00002c60: 696e 5b31 5d20 3d3d 2027 6327 290d 0a20  in[1] == 'c').. 
00002c70: 2020 2020 2020 2020 2020 2072 6574 7572             retur
00002c80: 6e20 353b 0d0a 2020 2020 2020 2020 656c  n 5;..        el
00002c90: 7365 2069 6620 2869 6e5b 315d 203d 3d20  se if (in[1] == 
00002ca0: 2764 2729 0d0a 2020 2020 2020 2020 2020  'd')..          
00002cb0: 2020 7265 7475 726e 2036 3b0d 0a20 2020    return 6;..   
00002cc0: 2020 2020 2065 6c73 6520 6966 2028 696e       else if (in
00002cd0: 5b31 5d20 3d3d 2027 6227 290d 0a20 2020  [1] == 'b')..   
00002ce0: 2020 2020 2020 2020 2072 6574 7572 6e20           return 
00002cf0: 373b 0d0a 2020 2020 2020 2020 656c 7365  7;..        else
00002d00: 0d0a 2020 2020 2020 2020 7b0d 0a20 2020  ..        {..   
00002d10: 2020 2020 2020 2020 2066 7072 696e 7466           fprintf
00002d20: 2873 7464 6572 722c 2022 496d 7072 6f70  (stderr, "Improp
00002d30: 6572 2075 7361 6765 206f 6620 7468 6520  er usage of the 
00002d40: 6d6f 6431 315f 6f74 6865 7273 2066 756e  mod11_others fun
00002d50: 6374 696f 6e2c 206c 6f6f 6b69 6e67 2066  ction, looking f
00002d60: 6f72 2061 2068 6967 6820 6279 7465 2229  or a high byte")
00002d70: 3b0d 0a20 2020 2020 2020 207d 0d0a 2020  ;..        }..  
00002d80: 2020 2020 2020 6272 6561 6b3b 0d0a 2020        break;..  
00002d90: 2020 6361 7365 2027 7027 3a20 2f2f 2046    case 'p': // F
00002da0: 6f72 206f 6e65 206f 6620 7468 6520 706f  or one of the po
00002db0: 696e 7465 7273 200d 0a20 2020 2020 2020  inters ..       
00002dc0: 2069 6620 2869 6e5b 315d 203d 3d20 2773   if (in[1] == 's
00002dd0: 2729 0d0a 2020 2020 2020 2020 2020 2020  ')..            
00002de0: 7265 7475 726e 2034 3b0d 0a20 2020 2020  return 4;..     
00002df0: 2020 2065 6c73 6520 6966 2028 696e 5b31     else if (in[1
00002e00: 5d20 3d3d 2027 6227 290d 0a20 2020 2020  ] == 'b')..     
00002e10: 2020 2020 2020 2072 6574 7572 6e20 353b         return 5;
00002e20: 0d0a 2020 2020 2020 2020 656c 7365 0d0a  ..        else..
00002e30: 2020 2020 2020 2020 7b0d 0a20 2020 2020          {..     
00002e40: 2020 2020 2020 2066 7072 696e 7466 2873         fprintf(s
00002e50: 7464 6572 722c 2022 496d 7072 6f70 6572  tderr, "Improper
00002e60: 2075 7361 6765 206f 6620 7468 6520 6d6f   usage of the mo
00002e70: 6431 315f 6f74 6865 7273 2066 756e 6374  d11_others funct
00002e80: 696f 6e2c 206c 6f6f 6b69 6e67 2066 6f72  ion, looking for
00002e90: 2061 2062 6173 6520 6f72 2073 7461 636b   a base or stack
00002ea0: 2070 7472 2229 3b0d 0a20 2020 2020 2020   ptr");..       
00002eb0: 207d 0d0a 0d0a 2020 2020 6361 7365 2027   }....    case '
00002ec0: 6927 3a0d 0a20 2020 2020 2020 2069 6620  i':..        if 
00002ed0: 2869 6e5b 315d 203d 3d20 2773 2729 0d0a  (in[1] == 's')..
00002ee0: 2020 2020 2020 2020 2020 2020 7265 7475              retu
00002ef0: 726e 2036 3b0d 0a20 2020 2020 2020 2065  rn 6;..        e
00002f00: 6c73 6520 6966 2028 696e 5b31 5d20 3d3d  lse if (in[1] ==
00002f10: 2027 6427 290d 0a20 2020 2020 2020 2020   'd')..         
00002f20: 2020 2072 6574 7572 6e20 373b 0d0a 2020     return 7;..  
00002f30: 2020 2020 2020 656c 7365 0d0a 2020 2020        else..    
00002f40: 2020 2020 7b0d 0a20 2020 2020 2020 2020      {..         
00002f50: 2020 2066 7072 696e 7466 2873 7464 6572     fprintf(stder
00002f60: 722c 2022 496d 7072 6f70 6572 2075 7361  r, "Improper usa
00002f70: 6765 2066 6f72 2074 6865 206d 6f64 3131  ge for the mod11
00002f80: 5f6f 7468 6572 732c 206c 6f6f 6b69 6e67  _others, looking
00002f90: 2066 6f72 2064 6573 7469 6e61 7469 6f6e   for destination
00002fa0: 2069 6e64 6578 2229 3b0d 0a20 2020 2020   index");..     
00002fb0: 2020 207d 0d0a 2020 2020 7d0d 0a0d 0a7d     }..    }....}
00002fc0: 0d0a 0d0a 0d0a 696e 7420 6d6f 6431 315f  ......int mod11_
00002fd0: 7461 626c 6528 6368 6172 2a20 696e 2920  table(char* in) 
00002fe0: 2020 0d0a 7b0d 0a20 2020 202f 2f20 5468    ..{..    // Th
00002ff0: 6520 6669 7273 7420 7468 696e 6720 746f  e first thing to
00003000: 206c 6f6f 6b20 666f 7220 2069 7320 7072   look for  is pr
00003010: 6566 6978 6573 2061 6674 6572 2074 6865  efixes after the
00003020: 2070 6572 6365 6e74 2073 6967 6e3a 0d0a   percent sign:..
00003030: 2020 2020 2f2f 2065 2c20 722c 2073 742c      // e, r, st,
00003040: 206d 6d2c 2078 6d6d 2c20 7228 6578 7465   mm, xmm, r(exte
00003050: 6e73 696f 6e29 0d0a 0d0a 2020 2020 2f2f  nsion)....    //
00003060: 2069 6e20 6578 616d 706c 6520 2572 6178   in example %rax
00003070: 2074 6865 2073 6563 6f6e 6420 6368 6172   the second char
00003080: 6163 7465 7220 7769 6c6c 2062 6520 7468  acter will be th
00003090: 6520 7072 6566 6978 206f 7220 7468 6520  e prefix or the 
000030a0: 6c61 636b 206f 6620 7468 6520 7072 6566  lack of the pref
000030b0: 6978 0d0a 2020 2020 0d0a 2020 2020 7377  ix..    ..    sw
000030c0: 6974 6368 2028 696e 5b31 5d29 0d0a 2020  itch (in[1])..  
000030d0: 2020 7b0d 0a20 2020 2063 6173 6520 2765    {..    case 'e
000030e0: 273a 0d0a 2020 2020 2020 2020 7265 7475  ':..        retu
000030f0: 726e 206d 6f64 3131 5f65 2869 6e29 3b0d  rn mod11_e(in);.
00003100: 0a20 2020 2063 6173 6520 276d 273a 0d0a  .    case 'm':..
00003110: 2020 2020 2020 2020 7265 7475 726e 206d          return m
00003120: 6f64 3131 5f6d 6d28 696e 293b 0d0a 2020  od11_mm(in);..  
00003130: 2020 6361 7365 2027 7227 3a20 2f2f 204e    case 'r': // N
00003140: 6f74 2061 7320 6561 7379 2061 7320 7468  ot as easy as th
00003150: 6520 6f74 6865 7220 6f6e 6573 0d0a 2020  e other ones..  
00003160: 2020 2020 2020 6966 2028 6e65 6564 735f        if (needs_
00003170: 7265 785f 7228 696e 2929 0d0a 2020 2020  rex_r(in))..    
00003180: 2020 2020 7b0d 0a20 2020 2020 2020 2020      {..         
00003190: 2020 2072 6574 7572 6e20 6d6f 6431 315f     return mod11_
000031a0: 7265 7828 696e 293b 0d0a 2020 2020 2020  rex(in);..      
000031b0: 2020 7d0d 0a20 2020 2020 2020 2065 6c73    }..        els
000031c0: 650d 0a20 2020 2020 2020 207b 0d0a 2020  e..        {..  
000031d0: 2020 2020 2020 2020 2020 7265 7475 726e            return
000031e0: 206d 6f64 3131 5f72 2869 6e29 3b0d 0a20   mod11_r(in);.. 
000031f0: 2020 2020 2020 207d 0d0a 2020 2020 6361         }..    ca
00003200: 7365 2027 7327 3a0d 0a20 2020 2020 2020  se 's':..       
00003210: 2072 6574 7572 6e20 6d6f 6431 315f 7374   return mod11_st
00003220: 2869 6e29 3b0d 0a20 2020 2063 6173 6520  (in);..    case 
00003230: 2778 273a 0d0a 2020 2020 2020 2020 7265  'x':..        re
00003240: 7475 726e 206d 6f64 3131 5f78 6d6d 2869  turn mod11_xmm(i
00003250: 6e29 3b0d 0a20 2020 2064 6566 6175 6c74  n);..    default
00003260: 3a0d 0a20 2020 2020 2020 2072 6574 7572  :..        retur
00003270: 6e20 6d6f 6431 315f 6f74 6865 7273 2869  n mod11_others(i
00003280: 6e29 3b0d 0a20 2020 207d 0d0a 0d0a 2020  n);..    }....  
00003290: 2020 0d0a 0d0a 2020 2020 0d0a 0d0a 7d0d    ....    ....}.
000032a0: 0a0d 0a76 6f69 6420 7265 675f 7461 626c  ...void reg_tabl
000032b0: 655f 7265 6769 7374 6572 5f6e 6577 2873  e_register_new(s
000032c0: 7472 7563 7420 7465 6d70 726d 202a 2074  truct temprm * t
000032d0: 656d 702c 2063 6861 7220 2a20 7265 672c  emp, char * reg,
000032e0: 2062 6f6f 6c20 6973 5f66 6972 7374 290d   bool is_first).
000032f0: 0a7b 0d0a 2020 2f2f 2054 6869 7320 6973  .{..  // This is
00003300: 2066 6f72 2074 6865 206e 6577 2072 6569   for the new rei
00003310: 6773 7465 7273 200d 0a20 2069 6e74 2072  gsters ..  int r
00003320: 6574 7572 6e65 6420 3d20 6174 6f69 2872  eturned = atoi(r
00003330: 6567 2b31 293b 0d0a 2020 6966 2028 6973  eg+1);..  if (is
00003340: 5f66 6972 7374 290d 0a20 2020 2074 656d  _first)..    tem
00003350: 702d 3e66 6972 7374 203d 2072 6574 7572  p->first = retur
00003360: 6e65 6420 2d20 383b 0d0a 0d0a 2020 656c  ned - 8;....  el
00003370: 7365 0d0a 2020 2020 7465 6d70 2d3e 7365  se..    temp->se
00003380: 636f 6e64 203d 2072 6574 7572 6e65 6420  cond = returned 
00003390: 2d20 383b 0d0a 0d0a 2020 0d0a 2020 0d0a  - 8;....  ..  ..
000033a0: 7d0d 0a0d 0a0d 0a69 6e74 2072 6574 5f6d  }......int ret_m
000033b0: 6f64 2863 6861 7220 2a20 696e 7075 7429  od(char * input)
000033c0: 0d0a 7b0d 0a20 2069 6620 2869 6e70 7574  ..{..  if (input
000033d0: 5b30 5d20 3d3d 2027 3027 2026 2620 696e  [0] == '0' && in
000033e0: 7075 745b 315d 203d 3d20 2778 2720 2920  put[1] == 'x' ) 
000033f0: 2f2f 2054 6869 7320 7769 6c6c 2062 6520  // This will be 
00003400: 736f 6d65 2073 6f72 7420 6f66 206f 6666  some sort of off
00003410: 7365 740d 0a20 2020 207b 0d0a 2020 2020  set..    {..    
00003420: 2020 6966 2028 2869 6e70 7574 5b33 5d20    if ((input[3] 
00003430: 3d3d 2027 7227 207c 7c20 696e 7075 745b  == 'r' || input[
00003440: 335d 203d 3d20 2765 2729 2026 2620 696e  3] == 'e') && in
00003450: 7075 745b 345d 203d 3d20 2769 2720 2626  put[4] == 'i' &&
00003460: 2069 6e70 7574 5b35 5d20 3d3d 2027 7027   input[5] == 'p'
00003470: 290d 0a09 7265 7475 726e 2030 3b0d 0a0d  )...return 0;...
00003480: 0a20 2020 2020 2069 6e74 206c 656e 6774  .      int lengt
00003490: 685f 6469 7370 203d 2030 3b0d 0a20 2020  h_disp = 0;..   
000034a0: 2020 2077 6869 6c65 2869 6e70 7574 5b6c     while(input[l
000034b0: 656e 6774 685f 6469 7370 2b2b 5d20 213d  ength_disp++] !=
000034c0: 2027 2827 293b 0d0a 0d0a 2020 2020 2020   '(');....      
000034d0: 6966 2028 2d2d 6c65 6e67 7468 5f64 6973  if (--length_dis
000034e0: 7020 3c3d 2034 2920 2f2f 3078 5858 2064  p <= 4) //0xXX d
000034f0: 6973 7020 380d 0a09 7b0d 0a09 2020 7265  isp 8...{...  re
00003500: 7475 726e 2031 3b0d 0a09 7d0d 0a20 2020  turn 1;...}..   
00003510: 2020 2072 6574 7572 6e20 323b 0d0a 2020     return 2;..  
00003520: 2020 7d0d 0a0d 0a20 2069 6620 282a 696e    }....  if (*in
00003530: 7075 7420 3d3d 2027 2827 290d 0a20 2020  put == '(')..   
00003540: 207b 0d0a 2020 2020 2020 7265 7475 726e   {..      return
00003550: 2030 3b0d 0a20 2020 207d 0d0a 0d0a 2020   0;..    }....  
00003560: 2f2f 2057 6520 6861 7665 2061 6c72 6561  // We have alrea
00003570: 6479 2064 6563 6964 6564 2074 6861 7420  dy decided that 
00003580: 7468 6572 6520 6973 206e 6f20 6f66 6673  there is no offs
00003590: 6574 2061 6e64 2074 6865 7265 2069 7320  et and there is 
000035a0: 6e6f 2069 6d6d 6564 6961 7465 2061 6464  no immediate add
000035b0: 7265 7373 696e 672c 206d 7573 7420 6265  ressing, must be
000035c0: 2061 2072 6567 6973 7465 720d 0a20 2072   a register..  r
000035d0: 6574 7572 6e20 333b 0d0a 2020 0d0a 7d0d  eturn 3;..  ..}.
000035e0: 0a0d 0a69 6e6c 696e 6520 626f 6f6c 206e  ...inline bool n
000035f0: 6565 6473 5f72 6578 5f72 2863 6861 7220  eeds_rex_r(char 
00003600: 2a20 7265 6729 0d0a 7b0d 0a20 2072 6574  * reg)..{..  ret
00003610: 7572 6e20 2872 6567 5b32 5d20 3e20 3437  urn (reg[2] > 47
00003620: 2026 2620 7265 675b 325d 203c 2035 3829   && reg[2] < 58)
00003630: 3b0d 0a7d 0d0a 0d0a 0d0a 766f 6964 2072  ;..}......void r
00003640: 6567 5f74 6162 6c65 5f72 6567 6973 7465  eg_table_registe
00003650: 725f 6578 7465 6e73 696f 6e28 7374 7275  r_extension(stru
00003660: 6374 2074 656d 7072 6d20 2a20 7465 6d70  ct temprm * temp
00003670: 2c20 6368 6172 202a 2072 6567 2c20 626f  , char * reg, bo
00003680: 6f6c 2069 735f 6669 7273 742c 2062 6f6f  ol is_first, boo
00003690: 6c20 7265 785f 7229 0d0a 7b0d 0a20 202f  l rex_r)..{..  /
000036a0: 2f20 5769 7468 2065 7874 656e 7369 6f6e  / With extension
000036b0: 7320 7468 6572 6520 6172 6520 7573 7561  s there are usua
000036c0: 6c6c 7920 6569 6768 7420 7265 6769 7374  lly eight regist
000036d0: 6572 7320 616c 6c20 656e 6469 6e67 2077  ers all ending w
000036e0: 6974 6820 7468 6569 7220 6e75 6d62 6572  ith their number
000036f0: 0d0a 2020 2f2f 2053 6f20 7765 2063 616e  ..  // So we can
00003700: 2065 6173 696c 7920 6765 7420 7468 6520   easily get the 
00003710: 7269 6768 7420 6e75 6d62 6572 2062 7920  right number by 
00003720: 7375 6274 7261 6374 696e 670d 0a0d 0a0d  subtracting.....
00003730: 0a20 2069 6e74 2073 756d 203d 2030 3b0d  .  int sum = 0;.
00003740: 0a20 2077 6869 6c65 2028 2a72 6567 2b2b  .  while (*reg++
00003750: 2026 2620 7375 6d2b 2b29 3b0d 0a0d 0a20   && sum++);.... 
00003760: 2069 6620 2869 735f 6669 7273 7420 2626   if (is_first &&
00003770: 2021 7265 785f 7229 0d0a 2020 2020 7465   !rex_r)..    te
00003780: 6d70 2d3e 6669 7273 7420 3d20 6174 6f69  mp->first = atoi
00003790: 2872 6567 2b73 756d 293b 0d0a 0d0a 2020  (reg+sum);....  
000037a0: 656c 7365 2069 6620 2869 735f 6669 7273  else if (is_firs
000037b0: 7420 2626 2072 6578 5f72 290d 0a20 2020  t && rex_r)..   
000037c0: 2074 656d 702d 3e66 6972 7374 203d 2061   temp->first = a
000037d0: 746f 6928 7265 672b 7375 6d29 202d 2038  toi(reg+sum) - 8
000037e0: 3b0d 0a0d 0a20 2065 6c73 6520 6966 2028  ;....  else if (
000037f0: 2169 735f 6669 7273 7420 2626 2021 7265  !is_first && !re
00003800: 785f 7229 0d0a 2020 2020 7465 6d70 2d3e  x_r)..    temp->
00003810: 7365 636f 6e64 203d 2061 746f 6928 7265  second = atoi(re
00003820: 672b 7375 6d29 3b0d 0a0d 0a20 200d 0a20  g+sum);....  .. 
00003830: 2065 6c73 650d 0a20 2020 2074 656d 702d   else..    temp-
00003840: 3e73 6563 6f6e 6420 3d20 6174 6f69 2872  >second = atoi(r
00003850: 6567 2b73 756d 2920 2d20 383b 0d0a 7d0d  eg+sum) - 8;..}.
00003860: 0a0d 0a0d 0a76 6f69 6420 7265 675f 7461  .....void reg_ta
00003870: 626c 655f 6279 7465 5f6e 6f5f 7265 7828  ble_byte_no_rex(
00003880: 7374 7275 6374 2074 656d 7072 6d20 2a20  struct temprm * 
00003890: 7465 6d70 2c20 6368 6172 202a 2072 6567  temp, char * reg
000038a0: 2c20 626f 6f6c 2069 735f 6669 7273 7429  , bool is_first)
000038b0: 0d0a 7b0d 0a20 2069 6620 2872 6567 5b30  ..{..  if (reg[0
000038c0: 5d20 3d3d 2027 6127 290d 0a20 2020 207b  ] == 'a')..    {
000038d0: 0d0a 2020 2020 2020 6966 2028 7265 675b  ..      if (reg[
000038e0: 315d 203d 3d20 276c 2729 0d0a 097b 0d0a  1] == 'l')...{..
000038f0: 0920 2069 6620 2869 735f 6669 7273 7429  .  if (is_first)
00003900: 0d0a 0920 2020 2074 656d 702d 3e66 6972  ...    temp->fir
00003910: 7374 203d 2030 3b0d 0a09 2020 656c 7365  st = 0;...  else
00003920: 0d0a 0920 2020 2074 656d 702d 3e73 6563  ...    temp->sec
00003930: 6f6e 6420 3d20 303b 0d0a 097d 0d0a 2020  ond = 0;...}..  
00003940: 2020 2020 656c 7365 200d 0a09 7b0d 0a09      else ...{...
00003950: 2020 6966 2028 6973 5f66 6972 7374 290d    if (is_first).
00003960: 0a09 2020 2020 7465 6d70 2d3e 6669 7273  ..    temp->firs
00003970: 7420 3d20 343b 0d0a 0920 2065 6c73 650d  t = 4;...  else.
00003980: 0a09 2020 2020 7465 6d70 2d3e 7365 636f  ..    temp->seco
00003990: 6e64 203d 2034 3b0d 0a09 7d0d 0a20 2020  nd = 4;...}..   
000039a0: 207d 0d0a 0d0a 2020 6966 2028 7265 675b   }....  if (reg[
000039b0: 305d 203d 3d20 2763 2729 0d0a 2020 2020  0] == 'c')..    
000039c0: 7b0d 0a20 2020 2020 2069 6620 2872 6567  {..      if (reg
000039d0: 5b31 5d20 3d3d 2027 6c27 290d 0a09 7b0d  [1] == 'l')...{.
000039e0: 0a09 2020 6966 2028 6973 5f66 6972 7374  ..  if (is_first
000039f0: 290d 0a09 2020 2020 7465 6d70 2d3e 6669  )...    temp->fi
00003a00: 7273 7420 3d20 313b 0d0a 0920 2065 6c73  rst = 1;...  els
00003a10: 650d 0a09 2020 2020 7465 6d70 2d3e 7365  e...    temp->se
00003a20: 636f 6e64 203d 2031 3b0d 0a09 7d0d 0a20  cond = 1;...}.. 
00003a30: 2020 2020 2065 6c73 650d 0a09 7b0d 0a09       else...{...
00003a40: 2020 6966 2028 6973 5f66 6972 7374 290d    if (is_first).
00003a50: 0a09 2020 2020 7465 6d70 2d3e 6669 7273  ..    temp->firs
00003a60: 7420 3d20 353b 0d0a 0920 2065 6c73 650d  t = 5;...  else.
00003a70: 0a09 2020 2020 7465 6d70 2d3e 7365 636f  ..    temp->seco
00003a80: 6e64 203d 2035 3b0d 0a09 7d0d 0a20 2020  nd = 5;...}..   
00003a90: 207d 0d0a 0d0a 2020 6966 2028 7265 675b   }....  if (reg[
00003aa0: 305d 203d 3d20 2764 2729 0d0a 2020 2020  0] == 'd')..    
00003ab0: 7b0d 0a20 2020 2020 2069 6620 2872 6567  {..      if (reg
00003ac0: 5b31 5d20 3d3d 2027 6c27 290d 0a09 7b0d  [1] == 'l')...{.
00003ad0: 0a09 2020 6966 2028 6973 5f66 6972 7374  ..  if (is_first
00003ae0: 290d 0a09 2020 2020 7465 6d70 2d3e 6669  )...    temp->fi
00003af0: 7273 7420 3d20 323b 0d0a 0920 2065 6c73  rst = 2;...  els
00003b00: 650d 0a09 2020 2020 7465 6d70 2d3e 7365  e...    temp->se
00003b10: 636f 6e64 203d 2032 3b0d 0a09 7d0d 0a20  cond = 2;...}.. 
00003b20: 2020 2020 2065 6c73 650d 0a09 7b0d 0a09       else...{...
00003b30: 2020 6966 2028 6973 5f66 6972 7374 290d    if (is_first).
00003b40: 0a09 2020 2020 7465 6d70 2d3e 6669 7273  ..    temp->firs
00003b50: 7420 3d20 363b 0d0a 0920 2065 6c73 650d  t = 6;...  else.
00003b60: 0a09 2020 2020 7465 6d70 2d3e 7365 636f  ..    temp->seco
00003b70: 6e64 203d 2036 3b0d 0a09 7d0d 0a20 2020  nd = 6;...}..   
00003b80: 207d 0d0a 0d0a 2020 656c 7365 0d0a 2020   }....  else..  
00003b90: 2020 7b0d 0a20 2020 2020 2069 6620 2872    {..      if (r
00003ba0: 6567 5b31 5d20 3d3d 2027 6c27 290d 0a09  eg[1] == 'l')...
00003bb0: 7b0d 0a09 2020 6966 2028 6973 5f66 6972  {...  if (is_fir
00003bc0: 7374 290d 0a09 2020 2020 7465 6d70 2d3e  st)...    temp->
00003bd0: 6669 7273 7420 3d20 333b 0d0a 0920 2065  first = 3;...  e
00003be0: 6c73 650d 0a09 2020 2020 7465 6d70 2d3e  lse...    temp->
00003bf0: 7365 636f 6e64 203d 2033 3b0d 0a09 7d0d  second = 3;...}.
00003c00: 0a20 2020 2020 2065 6c73 650d 0a09 7b0d  .      else...{.
00003c10: 0a09 2020 6966 2028 6973 5f66 6972 7374  ..  if (is_first
00003c20: 290d 0a09 2020 2020 7465 6d70 2d3e 6669  )...    temp->fi
00003c30: 7273 7420 3d20 373b 0d0a 0920 2065 6c73  rst = 7;...  els
00003c40: 650d 0a09 2020 2020 7465 6d70 2d3e 7365  e...    temp->se
00003c50: 636f 6e64 203d 2037 3b0d 0a09 2020 0d0a  cond = 7;...  ..
00003c60: 097d 0d0a 2020 2020 7d0d 0a7d 0d0a 0d0a  .}..    }..}....
00003c70: 766f 6964 2072 6567 5f74 6162 6c65 5f62  void reg_table_b
00003c80: 7974 655f 7265 7828 7374 7275 6374 2074  yte_rex(struct t
00003c90: 656d 7072 6d20 2a20 7465 6d70 2c20 6368  emprm * temp, ch
00003ca0: 6172 202a 2072 6567 2c20 626f 6f6c 2069  ar * reg, bool i
00003cb0: 735f 6669 7273 7429 0d0a 7b0d 0a20 2069  s_first)..{..  i
00003cc0: 6e74 206c 656e 6774 6820 3d20 303b 0d0a  nt length = 0;..
00003cd0: 2020 7768 696c 6520 282a 7265 672b 2b20    while (*reg++ 
00003ce0: 2626 206c 656e 6774 682b 2b29 3b0d 0a0d  && length++);...
00003cf0: 0a20 2069 6620 286c 656e 6774 6820 3d3d  .  if (length ==
00003d00: 2033 290d 0a20 2020 207b 0d0a 2020 2020   3)..    {..    
00003d10: 2020 6966 2028 7265 675b 305d 203d 3d20    if (reg[0] == 
00003d20: 2773 2720 2626 2072 6567 5b32 5d20 3d3d  's' && reg[2] ==
00003d30: 2027 6c27 290d 0a09 7b0d 0a09 2020 6966   'l')...{...  if
00003d40: 2028 6973 5f66 6972 7374 290d 0a09 2020   (is_first)...  
00003d50: 2020 7465 6d70 2d3e 6669 7273 7420 3d20    temp->first = 
00003d60: 343b 0d0a 0920 2065 6c73 650d 0a09 2020  4;...  else...  
00003d70: 2020 7465 6d70 2d3e 7365 636f 6e64 203d    temp->second =
00003d80: 2034 3b0d 0a09 7d0d 0a20 2020 2020 2069   4;...}..      i
00003d90: 6620 2872 6567 5b30 5d20 3d3d 2027 6227  f (reg[0] == 'b'
00003da0: 2020 2626 2072 6567 5b32 5d20 3d3d 2027    && reg[2] == '
00003db0: 6c27 290d 0a09 7b0d 0a09 2020 6966 2028  l')...{...  if (
00003dc0: 6973 5f66 6972 7374 290d 0a09 2020 2020  is_first)...    
00003dd0: 7465 6d70 2d3e 6669 7273 7420 3d20 353b  temp->first = 5;
00003de0: 0d0a 0920 2065 6c73 650d 0a09 2020 2020  ...  else...    
00003df0: 7465 6d70 2d3e 7365 636f 6e64 203d 2035  temp->second = 5
00003e00: 3b0d 0a09 7d0d 0a0d 0a20 2020 2020 2069  ;...}....      i
00003e10: 6620 2872 6567 5b30 5d20 3d3d 2027 7327  f (reg[0] == 's'
00003e20: 2020 2626 2072 6567 5b32 5d20 3d3d 2027    && reg[2] == '
00003e30: 6c27 290d 0a09 7b0d 0a09 2020 6966 2028  l')...{...  if (
00003e40: 6973 5f66 6972 7374 290d 0a09 2020 2020  is_first)...    
00003e50: 7465 6d70 2d3e 6669 7273 7420 3d20 363b  temp->first = 6;
00003e60: 0d0a 0920 2065 6c73 650d 0a09 2020 2020  ...  else...    
00003e70: 7465 6d70 2d3e 7365 636f 6e64 203d 2036  temp->second = 6
00003e80: 3b0d 0a09 7d0d 0a0d 0a20 2020 2020 2069  ;...}....      i
00003e90: 6620 2872 6567 5b30 5d20 3d3d 2027 6427  f (reg[0] == 'd'
00003ea0: 2020 2626 2072 6567 5b32 5d20 3d3d 2027    && reg[2] == '
00003eb0: 6c27 290d 0a09 7b0d 0a09 2020 6966 2028  l')...{...  if (
00003ec0: 6973 5f66 6972 7374 290d 0a09 2020 2020  is_first)...    
00003ed0: 7465 6d70 2d3e 6669 7273 7420 3d20 373b  temp->first = 7;
00003ee0: 0d0a 0920 2065 6c73 650d 0a09 2020 2020  ...  else...    
00003ef0: 7465 6d70 2d3e 7365 636f 6e64 203d 2037  temp->second = 7
00003f00: 3b0d 0a09 7d0d 0a20 2020 2020 200d 0a20  ;...}..      .. 
00003f10: 2020 207d 0d0a 0d0a 2020 656c 7365 0d0a     }....  else..
00003f20: 2020 2020 7b0d 0a20 2020 2020 2069 6620      {..      if 
00003f30: 2872 6567 5b30 5d20 3d3d 2027 6127 290d  (reg[0] == 'a').
00003f40: 0a09 7b0d 0a09 2020 6966 2028 6973 5f66  ..{...  if (is_f
00003f50: 6972 7374 290d 0a09 2020 2020 7465 6d70  irst)...    temp
00003f60: 2d3e 6669 7273 7420 3d20 303b 0d0a 0920  ->first = 0;... 
00003f70: 2065 6c73 650d 0a09 2020 2020 7465 6d70   else...    temp
00003f80: 2d3e 7365 636f 6e64 203d 2030 3b0d 0a09  ->second = 0;...
00003f90: 7d0d 0a20 2020 2020 2069 6620 2872 6567  }..      if (reg
00003fa0: 5b30 5d20 3d3d 2027 6327 290d 0a09 7b0d  [0] == 'c')...{.
00003fb0: 0a09 2020 6966 2028 6973 5f66 6972 7374  ..  if (is_first
00003fc0: 290d 0a09 2020 2020 7465 6d70 2d3e 6669  )...    temp->fi
00003fd0: 7273 7420 3d20 313b 0d0a 0920 2065 6c73  rst = 1;...  els
00003fe0: 650d 0a09 2020 2020 7465 6d70 2d3e 7365  e...    temp->se
00003ff0: 636f 6e64 2020 3d20 313b 0d0a 097d 0d0a  cond  = 1;...}..
00004000: 2020 2020 2020 6966 2028 7265 675b 305d        if (reg[0]
00004010: 203d 3d20 2764 2729 0d0a 097b 0d0a 0920   == 'd')...{... 
00004020: 2069 6620 2869 735f 6669 7273 7429 0d0a   if (is_first)..
00004030: 0920 2020 2074 656d 702d 3e66 6972 7374  .    temp->first
00004040: 203d 2032 3b0d 0a09 2020 656c 7365 0d0a   = 2;...  else..
00004050: 0920 2020 2074 656d 702d 3e73 6563 6f6e  .    temp->secon
00004060: 6420 3d20 323b 0920 200d 0a09 7d0d 0a20  d = 2;.  ...}.. 
00004070: 2020 2020 2069 6620 2872 6567 5b30 5d20       if (reg[0] 
00004080: 3d3d 2027 6227 290d 0a09 7b0d 0a09 2020  == 'b')...{...  
00004090: 6966 2028 6973 5f66 6972 7374 290d 0a09  if (is_first)...
000040a0: 2020 2020 7465 6d70 2d3e 6669 7273 7420      temp->first 
000040b0: 3d20 333b 0d0a 0920 2065 6c73 650d 0a09  = 3;...  else...
000040c0: 2020 2020 7465 6d70 2d3e 7365 636f 6e64      temp->second
000040d0: 203d 2033 3b0d 0a09 7d0d 0a0d 0a20 2020   = 3;...}....   
000040e0: 2020 2065 6c73 650d 0a09 6670 7269 6e74     else...fprint
000040f0: 6628 7374 6465 7272 2c20 2254 6865 2067  f(stderr, "The g
00004100: 6976 656e 2061 7267 756d 656e 7473 2063  iven arguments c
00004110: 616e 6e6f 7420 6265 2061 7373 656d 626c  annot be assembl
00004120: 6564 2229 3b0d 0a20 2020 207d 0d0a 0d0a  ed");..    }....
00004130: 7d0d 0a0d 0a76 6f69 6420 7461 626c 655f  }....void table_
00004140: 7365 676d 656e 745f 7265 6769 7374 6572  segment_register
00004150: 2873 7472 7563 7420 7465 6d70 726d 202a  (struct temprm *
00004160: 2074 656d 702c 2063 6861 7220 2a20 7265   temp, char * re
00004170: 672c 2062 6f6f 6c20 6973 5f66 6972 7374  g, bool is_first
00004180: 290d 0a7b 0d0a 2073 7769 7463 6820 2872  )..{.. switch (r
00004190: 6567 5b30 5d29 0d0a 2020 2020 7b0d 0a20  eg[0])..    {.. 
000041a0: 2020 2063 6173 6520 2765 273a 0d0a 2020     case 'e':..  
000041b0: 2020 2020 6966 2028 6973 5f66 6972 7374      if (is_first
000041c0: 290d 0a09 7465 6d70 2d3e 6669 7273 7420  )...temp->first 
000041d0: 3d20 303b 0d0a 2020 2020 2020 656c 7365  = 0;..      else
000041e0: 0d0a 0974 656d 702d 3e73 6563 6f6e 6420  ...temp->second 
000041f0: 3d20 303b 0d0a 2020 2020 2020 6272 6561  = 0;..      brea
00004200: 6b3b 0d0a 2020 2020 6361 7365 2027 6327  k;..    case 'c'
00004210: 3a0d 0a20 2020 2020 2069 6620 2869 735f  :..      if (is_
00004220: 6669 7273 7429 0d0a 0974 656d 702d 3e66  first)...temp->f
00004230: 6972 7374 203d 2031 3b0d 0a20 2020 2020  irst = 1;..     
00004240: 2065 6c73 650d 0a09 7465 6d70 2d3e 7365   else...temp->se
00004250: 636f 6e64 203d 2031 3b0d 0a20 2020 2020  cond = 1;..     
00004260: 2062 7265 616b 3b0d 0a20 2020 2063 6173   break;..    cas
00004270: 6520 2773 273a 0d0a 2020 2020 2020 6966  e 's':..      if
00004280: 2028 6973 5f66 6972 7374 290d 0a09 7465   (is_first)...te
00004290: 6d70 2d3e 6669 7273 7420 3d20 323b 0d0a  mp->first = 2;..
000042a0: 2020 2020 2020 656c 7365 0d0a 0974 656d        else...tem
000042b0: 702d 3e73 6563 6f6e 6420 3d20 323b 0d0a  p->second = 2;..
000042c0: 2020 2020 2020 6272 6561 6b3b 0d0a 2020        break;..  
000042d0: 2020 0d0a 2020 2020 6361 7365 2027 6427    ..    case 'd'
000042e0: 3a0d 0a20 2020 2020 2069 6620 2869 735f  :..      if (is_
000042f0: 6669 7273 7429 0d0a 0974 656d 702d 3e66  first)...temp->f
00004300: 6972 7374 203d 2033 3b0d 0a20 2020 2020  irst = 3;..     
00004310: 2065 6c73 650d 0a09 7465 6d70 2d3e 7365   else...temp->se
00004320: 636f 6e64 203d 2033 3b0d 0a20 2020 2020  cond = 3;..     
00004330: 2062 7265 616b 3b0d 0a20 2020 2063 6173   break;..    cas
00004340: 6520 2766 273a 0d0a 2020 2020 2020 6966  e 'f':..      if
00004350: 2028 6973 5f66 6972 7374 290d 0a09 7465   (is_first)...te
00004360: 6d70 2d3e 6669 7273 7420 3d20 343b 0d0a  mp->first = 4;..
00004370: 2020 2020 2020 656c 7365 0d0a 0974 656d        else...tem
00004380: 702d 3e73 6563 6f6e 6420 3d20 343b 0d0a  p->second = 4;..
00004390: 2020 2020 2020 6272 6561 6b3b 0d0a 2020        break;..  
000043a0: 2020 6361 7365 2027 6727 3a0d 0a20 2020    case 'g':..   
000043b0: 2020 2069 6620 2869 735f 6669 7273 7429     if (is_first)
000043c0: 0d0a 0974 656d 702d 3e66 6972 7374 203d  ...temp->first =
000043d0: 2035 3b0d 0a20 2020 2020 2065 6c73 650d   5;..      else.
000043e0: 0a09 7465 6d70 2d3e 7365 636f 6e64 203d  ..temp->second =
000043f0: 2035 3b0d 0a20 2020 2064 6566 6175 6c74   5;..    default
00004400: 3a0d 0a20 2020 2020 2066 7072 696e 7466  :..      fprintf
00004410: 2873 7464 6572 722c 2022 4e6f 2073 6567  (stderr, "No seg
00004420: 6d65 6e74 2072 6567 6973 7465 7220 666f  ment register fo
00004430: 7220 7468 6520 6769 7665 6e20 6172 6775  r the given argu
00004440: 6d65 6e74 2229 3b0d 0a20 2020 2020 200d  ment");..      .
00004450: 0a20 2020 207d 0d0a 7d0d 0a0d 0a76 6f69  .    }..}....voi
00004460: 6420 7461 626c 655f 726d 5f6d 6f64 3030  d table_rm_mod00
00004470: 2873 7472 7563 7420 7465 6d70 726d 202a  (struct temprm *
00004480: 7465 6d70 2c20 6368 6172 202a 2072 6567  temp, char * reg
00004490: 2c20 626f 6f6c 2069 735f 6669 7273 742c  , bool is_first,
000044a0: 2062 6f6f 6c20 7265 785f 7229 202f 2f20   bool rex_r) // 
000044b0: 4573 7365 6e74 6961 6c6c 7920 7468 6973  Essentially this
000044c0: 206a 7573 7420 6d65 616e 7320 7765 2068   just means we h
000044d0: 6176 6520 6120 7269 7020 706f 696e 7465  ave a rip pointe
000044e0: 7220 6f72 206e 6f20 6469 7370 6c61 6365  r or no displace
000044f0: 6d65 6e74 0d0a 7b0d 0a20 2020 202f 2f20  ment..{..    // 
00004500: 5468 6973 2066 756e 6374 696f 6e20 6e65  This function ne
00004510: 6564 7320 746f 2066 6967 7572 6520 6f75  eds to figure ou
00004520: 7420 7768 6963 6820 7265 6769 7374 6572  t which register
00004530: 2069 7320 6265 696e 6720 7061 7373 6564   is being passed
00004540: 2069 6e20 616e 6420 7468 656e 2062 6173   in and then bas
00004550: 6564 206f 6e20 7468 6174 2061 7373 6967  ed on that assig
00004560: 6e20 3320 6269 7473 2074 6f20 7468 6520  n 3 bits to the 
00004570: 7465 6d70 0d0a 2020 2020 2f2f 204f 6464  temp..    // Odd
00004580: 6c79 2065 6e6f 7567 682c 2074 6865 2049  ly enough, the I
00004590: 5020 6765 7473 2074 6869 7320 3030 206d  P gets this 00 m
000045a0: 6f64 0d0a 2369 6620 6465 6275 670d 0a20  od..#if debug.. 
000045b0: 2020 2069 6620 2872 6567 5b30 5d20 3d3d     if (reg[0] ==
000045c0: 2027 3027 2026 2620 7265 675b 315d 203d   '0' && reg[1] =
000045d0: 3d20 2778 2729 0d0a 2020 2020 7b0d 0a20  = 'x')..    {.. 
000045e0: 2020 2020 2020 2069 6e74 2064 6973 705f         int disp_
000045f0: 6465 6275 6720 3d20 303b 0d0a 2020 2020  debug = 0;..    
00004600: 2020 2020 7768 696c 6520 2872 6567 5b64      while (reg[d
00004610: 6973 705f 6465 6275 675d 2021 3d20 2728  isp_debug] != '(
00004620: 2720 2626 2064 6973 705f 6465 6275 672b  ' && disp_debug+
00004630: 2b29 3b0d 0a20 2020 2020 2020 2064 6973  +);..        dis
00004640: 705f 6465 6275 672b 2b3b 202f 2f20 4d6f  p_debug++; // Mo
00004650: 7665 2066 6f72 7761 7264 2074 6f20 7468  ve forward to th
00004660: 6520 7065 7263 656e 7420 7369 676e 0d0a  e percent sign..
00004670: 2020 2020 2020 2020 6173 7365 7274 2872          assert(r
00004680: 6567 5f73 7472 696e 675f 636f 6d70 6172  eg_string_compar
00004690: 6528 7265 6720 2b20 6469 7370 5f64 6562  e(reg + disp_deb
000046a0: 7567 2c20 2225 7269 7022 2929 3b0d 0a20  ug, "%rip"));.. 
000046b0: 2020 207d 0d0a 2365 6e64 6966 0d0a 2020     }..#endif..  
000046c0: 2020 0d0a 2020 200d 0a7d 0d0a 0d0a 0d0a    ..   ..}......
000046d0: 766f 6964 2074 6162 6c65 5f72 6d5f 6d6f  void table_rm_mo
000046e0: 6430 3128 7374 7275 6374 2074 656d 7072  d01(struct tempr
000046f0: 6d2a 2074 656d 702c 2063 6861 722a 2072  m* temp, char* r
00004700: 6567 2c20 626f 6f6c 2069 735f 6669 7273  eg, bool is_firs
00004710: 742c 2062 6f6f 6c20 7265 785f 7229 0d0a  t, bool rex_r)..
00004720: 7b0d 0a20 2020 202f 2f20 4974 2069 7320  {..    // It is 
00004730: 6173 7375 6d65 6420 7468 6174 2074 6869  assumed that thi
00004740: 7320 6861 7320 6120 3120 6279 7465 206f  s has a 1 byte o
00004750: 6666 7365 7420 6f72 2022 6469 7370 6c61  ffset or "displa
00004760: 6365 6d65 6e74 2220 7769 6c6c 2062 6520  cement" will be 
00004770: 6173 7365 7274 6564 0d0a 2020 2020 2f2f  asserted..    //
00004780: 2049 6620 7468 6572 6520 6973 2063 6f6d   If there is com
00004790: 706c 6578 206d 656d 6f72 7920 6164 6472  plex memory addr
000047a0: 6573 7369 6e67 2c20 7468 656e 2061 2073  essing, then a s
000047b0: 6570 6172 6174 6520 5349 4220 6675 6e63  eparate SIB func
000047c0: 7469 6f6e 2077 696c 6c20 6265 2063 616c  tion will be cal
000047d0: 6c65 640d 0a20 2020 2069 6e74 2064 6973  led..    int dis
000047e0: 705f 6c65 6e67 7468 203d 2030 3b0d 0a0d  p_length = 0;...
000047f0: 0a23 6966 2064 6562 7567 0d0a 2020 2020  .#if debug..    
00004800: 6173 7365 7274 2872 6567 5b30 5d20 3d3d  assert(reg[0] ==
00004810: 2027 3027 2026 2620 7265 675b 315d 203d   '0' && reg[1] =
00004820: 3d20 2778 2729 3b0d 0a20 2020 2061 7373  = 'x');..    ass
00004830: 6572 7428 7265 675b 325d 2021 3d20 2728  ert(reg[2] != '(
00004840: 2729 3b20 2f2f 204d 616b 6520 7375 7265  '); // Make sure
00004850: 2074 6869 7320 6973 2062 6569 6e67 2063   this is being c
00004860: 616c 6c65 6420 636f 7272 6563 746c 790d  alled correctly.
00004870: 0a23 656e 6469 660d 0a0d 0a20 2020 2077  .#endif....    w
00004880: 6869 6c65 2028 7265 675b 6469 7370 5f6c  hile (reg[disp_l
00004890: 656e 6774 685d 2021 3d20 2728 2720 2626  ength] != '(' &&
000048a0: 2064 6973 705f 6c65 6e67 7468 2b2b 293b   disp_length++);
000048b0: 0d0a 0d0a 2020 2020 6469 7370 5f6c 656e  ....    disp_len
000048c0: 6774 682b 2b3b 202f 2f20 5468 6973 2069  gth++; // This i
000048d0: 7320 6d6f 7665 6420 7061 7374 2074 6865  s moved past the
000048e0: 2070 6172 656e 7468 6573 6573 0d0a 0d0a   parentheses....
000048f0: 2020 2020 696e 7420 6d6f 6420 3d20 6d6f      int mod = mo
00004900: 6431 305f 3031 5f74 6162 6c65 2872 6567  d10_01_table(reg
00004910: 202b 2064 6973 705f 6c65 6e67 7468 293b   + disp_length);
00004920: 0d0a 0d0a 2369 6620 6465 6275 670d 0a20  ....#if debug.. 
00004930: 2020 2061 7373 6572 7428 6d6f 6420 213d     assert(mod !=
00004940: 202d 3129 3b0d 0a23 656e 6469 660d 0a0d   -1);..#endif...
00004950: 0a20 2020 2069 6620 2869 735f 6669 7273  .    if (is_firs
00004960: 7429 0d0a 2020 2020 7b0d 0a20 2020 2020  t)..    {..     
00004970: 2020 2074 656d 702d 3e66 6972 7374 203d     temp->first =
00004980: 206d 6f64 3b0d 0a20 2020 207d 0d0a 0d0a   mod;..    }....
00004990: 2020 2020 656c 7365 0d0a 2020 2020 7b0d      else..    {.
000049a0: 0a20 2020 2020 2020 2074 656d 702d 3e73  .        temp->s
000049b0: 6563 6f6e 6420 3d20 6d6f 643b 0d0a 2020  econd = mod;..  
000049c0: 2020 7d0d 0a7d 0d0a 0d0a 0d0a 766f 6964    }..}......void
000049d0: 2074 6162 6c65 5f72 6d5f 6d6f 6431 3028   table_rm_mod10(
000049e0: 7374 7275 6374 2074 656d 7072 6d20 2a20  struct temprm * 
000049f0: 7465 6d70 2c20 6368 6172 202a 2072 6567  temp, char * reg
00004a00: 2c20 626f 6f6c 2069 735f 6669 7273 7429  , bool is_first)
00004a10: 0d0a 7b0d 0a20 200d 0a20 202f 2f20 466f  ..{..  ..  // Fo
00004a20: 7220 616c 6c20 6f66 2074 6865 7365 2074  r all of these t
00004a30: 6865 7920 7368 6f75 6c64 2068 6176 6520  hey should have 
00004a40: 6120 3420 6279 7465 206f 6666 7365 7420  a 4 byte offset 
00004a50: 7468 6174 2069 7320 616e 2069 6d6d 6564  that is an immed
00004a60: 6961 7465 2e20 4966 2074 6865 7920 6361  iate. If they ca
00004a70: 6e20 6265 2065 7870 7265 7373 6564 2061  n be expressed a
00004a80: 7320 6f6e 6520 6279 7465 0d0a 2020 2f2f  s one byte..  //
00004a90: 2074 6865 6e20 7768 6174 2773 2074 6865   then what's the
00004aa0: 2070 6f69 6e74 3f0d 0a20 202f 2f20 5468   point?..  // Th
00004ab0: 6973 2073 686f 756c 6420 6265 2063 616c  is should be cal
00004ac0: 6c65 6420 7768 656e 2074 6865 7265 2069  led when there i
00004ad0: 7320 6120 3e20 3120 6279 7465 206f 6666  s a > 1 byte off
00004ae0: 7365 7420 666f 7220 7468 6520 6d65 6d6f  set for the memo
00004af0: 7279 2061 6464 7265 7373 696e 670d 0a20  ry addressing.. 
00004b00: 202f 2f20 4966 2074 6865 7265 2069 7320   // If there is 
00004b10: 636f 6d70 6c65 7820 6d65 6d6f 7279 2061  complex memory a
00004b20: 6464 7265 7373 696e 672c 2074 6865 6e20  ddressing, then 
00004b30: 6120 7365 7061 7261 7465 2053 4942 2066  a separate SIB f
00004b40: 756e 6374 696f 6e20 7769 6c6c 2062 6520  unction will be 
00004b50: 6361 6c6c 6564 0d0a 0d0a 2020 696e 7420  called....  int 
00004b60: 6469 7370 5f6c 656e 6774 6820 3d20 303b  disp_length = 0;
00004b70: 0d0a 0d0a 2369 6620 6465 6275 670d 0a20  ....#if debug.. 
00004b80: 2061 7373 6572 7428 7265 675b 305d 203d   assert(reg[0] =
00004b90: 3d20 2730 2720 2626 2072 6567 5b31 5d20  = '0' && reg[1] 
00004ba0: 3d3d 2027 7827 293b 0d0a 2020 6173 7365  == 'x');..  asse
00004bb0: 7274 2872 6567 5b32 5d20 213d 2027 2827  rt(reg[2] != '('
00004bc0: 2026 2620 7265 675b 335d 2021 3d20 2728   && reg[3] != '(
00004bd0: 2729 3b20 2f2f 204d 616b 6520 7375 7265  '); // Make sure
00004be0: 2074 6869 7320 6973 2062 6569 6e67 2063   this is being c
00004bf0: 616c 6c65 6420 636f 7272 6563 746c 790d  alled correctly.
00004c00: 0a23 656e 6469 660d 0a20 2077 6869 6c65  .#endif..  while
00004c10: 2028 2872 6567 5b64 6973 705f 6c65 6e67   ((reg[disp_leng
00004c20: 7468 5d20 213d 2027 2827 2029 2026 2620  th] != '(' ) && 
00004c30: 6469 7370 5f6c 656e 6774 682b 2b29 3b0d  disp_length++);.
00004c40: 0a20 202f 2f20 4469 7370 206c 656e 6774  .  // Disp lengt
00004c50: 6820 6973 206e 6f77 2061 7420 7468 6520  h is now at the 
00004c60: 6669 7273 7420 7061 7265 6e74 6865 7369  first parenthesi
00004c70: 732e 204e 6565 6473 2074 6f20 6265 206d  s. Needs to be m
00004c80: 6f76 6564 2070 6173 7420 6974 0d0a 2020  oved past it..  
00004c90: 6469 7370 5f6c 656e 6774 682b 2b3b 0d0a  disp_length++;..
00004ca0: 2020 2f2f 204e 6f77 2064 6973 705f 6c65    // Now disp_le
00004cb0: 6e67 7468 2069 7320 6174 2074 6865 2072  ngth is at the r
00004cc0: 6967 6874 2073 706f 740d 0a20 202f 2f20  ight spot..  // 
00004cd0: 5468 6520 7374 7269 6e67 2063 6f6d 7061  The string compa
00004ce0: 7265 2066 756e 6374 696f 6e20 4920 6d61  re function I ma
00004cf0: 6465 2077 696c 6c20 6265 2065 7370 6563  de will be espec
00004d00: 6961 6c6c 7920 7573 6566 756c 2062 6563  ially useful bec
00004d10: 6175 7365 2074 6865 2072 6567 6973 7465  ause the registe
00004d20: 7273 2061 6c6c 2068 6176 6520 3c3d 2033  rs all have <= 3
00004d30: 206c 656e 6774 680d 0a20 202f 2f20 4e6f   length..  // No
00004d40: 7720 4920 6e65 6564 2074 6f20 6361 6c6c  w I need to call
00004d50: 2074 6865 2066 756e 6374 696f 6e20 6672   the function fr
00004d60: 6f6d 2061 626f 7665 206f 6e20 7468 6973  om above on this
00004d70: 0d0a 0d0a 2020 696e 7420 6d6f 6420 3d20  ....  int mod = 
00004d80: 6d6f 6431 305f 3031 5f74 6162 6c65 2872  mod10_01_table(r
00004d90: 6567 202b 2064 6973 705f 6c65 6e67 7468  eg + disp_length
00004da0: 293b 0d0a 0d0a 2369 6620 6465 6275 670d  );....#if debug.
00004db0: 0a20 2061 7373 6572 7428 6d6f 6420 213d  .  assert(mod !=
00004dc0: 202d 3129 3b20 2f2f 204d 616b 6520 7375   -1); // Make su
00004dd0: 7265 2074 6865 2069 6e69 7469 616c 2063  re the initial c
00004de0: 6865 636b 2073 7563 6365 6564 6564 0d0a  heck succeeded..
00004df0: 2365 6e64 6966 200d 0a0d 0a0d 0a20 2069  #endif ......  i
00004e00: 6620 2869 735f 6669 7273 7429 0d0a 2020  f (is_first)..  
00004e10: 7b0d 0a20 2020 2020 2074 656d 702d 3e66  {..      temp->f
00004e20: 6972 7374 203d 206d 6f64 3b0d 0a20 207d  irst = mod;..  }
00004e30: 0d0a 0d0a 2020 656c 7365 0d0a 2020 7b0d  ....  else..  {.
00004e40: 0a20 2020 2020 2074 656d 702d 3e73 6563  .      temp->sec
00004e50: 6f6e 6420 3d20 6d6f 643b 0d0a 2020 7d0d  ond = mod;..  }.
00004e60: 0a20 200d 0a20 200d 0a0d 0a20 200d 0a7d  .  ..  ....  ..}
00004e70: 0d0a 0d0a 0d0a 0d0a 0d0a 0d0a 0d0a 0d0a  ................
00004e80: 0d0a 0d0a                                ....
